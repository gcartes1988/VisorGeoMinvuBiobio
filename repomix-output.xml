This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.gitignore
backend/app/database.py
backend/app/dependencies.py
backend/app/main.py
backend/app/middleware/auth_middleware.py
backend/app/models/__init__.py
backend/app/models/categoria.py
backend/app/models/ciclovia.py
backend/app/models/comuna.py
backend/app/models/contratista.py
backend/app/models/documento.py
backend/app/models/elementos.py
backend/app/models/estado_avance.py
backend/app/models/fuente_financiamiento.py
backend/app/models/log_cambios.py
backend/app/models/parque.py
backend/app/models/pavimento.py
backend/app/models/provincia.py
backend/app/models/proyecto.py
backend/app/models/region.py
backend/app/models/tipo_calzada.py
backend/app/models/tipo_ciclovia.py
backend/app/models/tipo_pavimento.py
backend/app/models/usuario.py
backend/app/routes/auth.py
backend/app/routes/categoria.py
backend/app/routes/ciclovia.py
backend/app/routes/comuna.py
backend/app/routes/fuente_financiamiento.py
backend/app/routes/log_cambios.py
backend/app/routes/parque.py
backend/app/routes/pavimento.py
backend/app/routes/provincia.py
backend/app/routes/proyecto_elementos.py
backend/app/routes/proyecto.py
backend/app/routes/usuario.py
backend/app/schemas/__init__.py
backend/app/schemas/categoria.py
backend/app/schemas/ciclovia.py
backend/app/schemas/comuna.py
backend/app/schemas/contratista.py
backend/app/schemas/elementos.py
backend/app/schemas/estado_avance.py
backend/app/schemas/fuente_financiamiento.py
backend/app/schemas/log_cambios.py
backend/app/schemas/parque.py
backend/app/schemas/pavimento.py
backend/app/schemas/provincia.py
backend/app/schemas/proyecto.py
backend/app/schemas/tipo_calzada.py
backend/app/schemas/tipo_pavimento.py
backend/app/schemas/usuario.py
backend/app/utils/firebase_auth.py
backend/app/utils/geo.py
frontend/.gitignore
frontend/package.json
frontend/public/index.html
frontend/public/manifest.json
frontend/public/robots.txt
frontend/README.md
frontend/src/App.css
frontend/src/App.js
frontend/src/App.test.js
frontend/src/components/admin/CrearProyecto.js
frontend/src/components/admin/DashboardResumen.js
frontend/src/components/admin/EditarProyecto.js
frontend/src/components/admin/GestionParques.js
frontend/src/components/admin/GestionPavimentos.js
frontend/src/components/admin/GestionProyectos.js
frontend/src/components/admin/ListaLogCambios.js
frontend/src/components/admin/ListaParques.js
frontend/src/components/admin/ListaPavimentos.js
frontend/src/components/admin/ListaProyectos.js
frontend/src/components/admin/ListaProyectosPendientes.js
frontend/src/components/BuscadorProyectos.js
frontend/src/components/EditarParque.js
frontend/src/components/EditarPavimento.js
frontend/src/components/FiltroModal.js
frontend/src/components/FormularioCiclovia.js
frontend/src/components/FormularioParque.js
frontend/src/components/FormularioPavimento.js
frontend/src/components/FormularioProyecto.js
frontend/src/components/Icono.js
frontend/src/components/LeyendaMapa.js
frontend/src/components/LoadingScreen.js
frontend/src/components/MapaProyectos.js
frontend/src/components/Sidebar.js
frontend/src/components/SideBarAdmin.js
frontend/src/components/VistaPreviaGeojson.js
frontend/src/components/ZoomControl.js
frontend/src/context/UserContext.js
frontend/src/css/admin.css
frontend/src/css/adminlayout.css
frontend/src/css/filtroModal.css
frontend/src/css/formularios.css
frontend/src/css/home.css
frontend/src/css/LeyendaMapa.css
frontend/src/css/listas.css
frontend/src/css/loading.css
frontend/src/css/login.css
frontend/src/css/map-controls.css
frontend/src/css/sidebarvisor.css
frontend/src/css/styles.css
frontend/src/hooks/useElementosPorProyecto.js
frontend/src/hooks/useLogCambios.js
frontend/src/hooks/usePavimentosPorProyecto.js
frontend/src/hooks/useProyectos.js
frontend/src/hooks/useTotales.js
frontend/src/index.css
frontend/src/index.js
frontend/src/layout/AdminLayout.js
frontend/src/logo.svg
frontend/src/pages/Admin.js
frontend/src/pages/Home.js
frontend/src/pages/Login.js
frontend/src/reportWebVitals.js
frontend/src/services/api.js
frontend/src/services/firebase.js
frontend/src/setupTests.js
frontend/src/utils/validarGeoJSON.js
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="backend/app/database.py">
# app/database.py
from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
from dotenv import load_dotenv
import os

load_dotenv()
DATABASE_URL = os.getenv("DATABASE_URL")

engine = create_engine(DATABASE_URL)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
Base = declarative_base()

def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

# Importar modelos para que SQLAlchemy los registre
from app.models import (
    region, provincia, comuna, categoria, usuario,
    proyecto, documento, log_cambios, pavimento,
    ciclovia, parque, estado_avance, tipo_calzada,
    tipo_pavimento, tipo_ciclovia, contratista, fuente_financiamiento
)
</file>

<file path="backend/app/dependencies.py">
from fastapi import Depends, HTTPException, Header
from firebase_admin import auth
from app.models.usuario import Usuario
from app.database import get_db
from sqlalchemy.orm import Session

def get_current_user(authorization: str = Header(...), db: Session = Depends(get_db)) -> Usuario:
    try:
        token = authorization.replace("Bearer ", "")
        decoded_token = auth.verify_id_token(token)
        firebase_uid = decoded_token["uid"]
    except Exception:
        raise HTTPException(status_code=401, detail="Token inv√°lido")

    usuario = db.query(Usuario).filter(Usuario.firebase_uid == firebase_uid).first()
    if not usuario:
        raise HTTPException(status_code=403, detail="Usuario no registrado")
    return usuario
</file>

<file path="backend/app/models/ciclovia.py">
from sqlalchemy import Column, Integer, ForeignKey, Text
from sqlalchemy.orm import relationship
from geoalchemy2 import Geometry
from app.database import Base

class Ciclovia(Base):
    __tablename__ = "ciclovia"

    id = Column(Integer, primary_key=True, index=True)
    proyecto_id = Column(Integer, ForeignKey("proyecto.id", ondelete="CASCADE"), nullable=False)
    tipo_ciclovia_id = Column(Integer, ForeignKey("tipo_ciclovia.id"), nullable=False)
    longitud_metros = Column(Integer, nullable=False)
    observaciones = Column(Text)

    comuna_id = Column(Integer, ForeignKey("comuna.id"), nullable=False)
    comuna = relationship("Comuna")

    geometria = Column(Geometry(geometry_type="LINESTRING", srid=4326), nullable=False)

    # Relaciones
    proyecto = relationship("Proyecto", back_populates="ciclovias")
    tipo_ciclovia = relationship("TipoCiclovia")
</file>

<file path="backend/app/models/comuna.py">
from sqlalchemy import Column, Integer, String, ForeignKey
from sqlalchemy.orm import relationship
from app.database import Base

class Comuna(Base):
    __tablename__ = "comuna"

    id = Column(Integer, primary_key=True, index=True)
    nombre = Column(String, nullable=False)
    codigo = Column(String, nullable=False)
    provincia_id = Column(Integer, ForeignKey("provincia.id"))

    # Relaciones
    provincia = relationship("Provincia", back_populates="comunas")
    pavimentos = relationship("Pavimento", back_populates="comuna")
</file>

<file path="backend/app/models/contratista.py">
# app/models/contratista.py

from sqlalchemy import Column, Integer, String
from app.database import Base

class Contratista(Base):
    __tablename__ = "contratista"

    id = Column(Integer, primary_key=True, index=True)
    nombre = Column(String, unique=True, nullable=False)
</file>

<file path="backend/app/models/documento.py">
from sqlalchemy import Column, Integer, String, ForeignKey
from sqlalchemy.orm import relationship
from app.database import Base

class Documento(Base):
    __tablename__ = "documento"

    id = Column(Integer, primary_key=True, index=True)
    nombre = Column(String, nullable=False)
    url = Column(String, nullable=False)
    proyecto_id = Column(Integer, ForeignKey("proyecto.id"))

    # Relaciones
    proyecto = relationship("Proyecto", back_populates="documentos")
</file>

<file path="backend/app/models/elementos.py">
from typing import List, Optional
from pydantic import BaseModel
from shapely.geometry import mapping


class GeometriaOut(BaseModel):
    type: str
    coordinates: list


class PavimentoMini(BaseModel):
    id: int
    sector: str
    estado_avance: Optional[str]
    comuna: Optional[str]
    geometria: Optional[GeometriaOut]


class CicloviaMini(BaseModel):
    id: int
    nombre_tramo: str
    estado_avance: Optional[str]
    comuna: Optional[str]
    geometria: Optional[GeometriaOut]


class ParqueMini(BaseModel):
    id: int
    direccion: Optional[str]
    comuna: Optional[str]
    superficie_ha: Optional[float]
    geometria: Optional[GeometriaOut]


class ElementosPorProyectoOut(BaseModel):
    pavimentos: List[PavimentoMini]
    ciclovias: List[CicloviaMini]
    parques: List[ParqueMini]
</file>

<file path="backend/app/models/estado_avance.py">
from sqlalchemy import Column, Integer, String
from app.database import Base

class EstadoAvance(Base):
    __tablename__ = 'estado_avance'
    id = Column(Integer, primary_key=True, index=True)
    nombre = Column(String, nullable=False)
</file>

<file path="backend/app/models/provincia.py">
# app/models/provincia.py
from sqlalchemy import Column, Integer, String, ForeignKey
from sqlalchemy.orm import relationship
from app.database import Base

class Provincia(Base):
    __tablename__ = "provincia"

    id = Column(Integer, primary_key=True, index=True)
    nombre = Column(String)
    codigo = Column(String)
    region_id = Column(Integer, ForeignKey("region.id"))

    # Relaci√≥n con Region
    region = relationship("Region", back_populates="provincias")
    # Relaci√≥n con Comuna (declarada como string para evitar problemas)
    comunas = relationship("Comuna", back_populates="provincia")
</file>

<file path="backend/app/models/region.py">
from sqlalchemy import Column, Integer, String
from sqlalchemy.orm import relationship
from app.database import Base

class Region(Base):
    __tablename__ = "region"

    id = Column(Integer, primary_key=True, index=True)
    nombre = Column(String, nullable=False)

    # Relaciones
    provincias = relationship("Provincia", back_populates="region")
</file>

<file path="backend/app/models/tipo_calzada.py">
# app/models/tipo_calzada.py

from sqlalchemy import Column, Integer, String
from app.database import Base

class TipoCalzada(Base):
    __tablename__ = "tipo_calzada"

    id = Column(Integer, primary_key=True, index=True)
    nombre = Column(String, unique=True, nullable=False)
</file>

<file path="backend/app/models/tipo_ciclovia.py">
# app/models/tipo_ciclovia.py

from sqlalchemy import Column, Integer, String
from app.database import Base

class TipoCiclovia(Base):
    __tablename__ = "tipo_ciclovia"

    id = Column(Integer, primary_key=True, index=True)
    nombre = Column(String, unique=True, nullable=False)
</file>

<file path="backend/app/models/tipo_pavimento.py">
# app/models/tipo_pavimento.py

from sqlalchemy import Column, Integer, String
from app.database import Base

class TipoPavimento(Base):
    __tablename__ = "tipo_pavimento"

    id = Column(Integer, primary_key=True, index=True)
    nombre = Column(String, unique=True, nullable=False)
</file>

<file path="backend/app/routes/categoria.py">
# Importaciones necesarias desde FastAPI y SQLAlchemy
from fastapi import APIRouter, Depends                    # APIRouter para crear rutas, Depends para manejar dependencias
from sqlalchemy.orm import Session                        # Session permite interactuar con la base de datos usando SQLAlchemy

# Importaci√≥n del helper para obtener la sesi√≥n activa de la base de datos
from app.database import get_db

# Importaci√≥n del modelo ORM de categor√≠a (mapea la tabla 'categoria')
from app.models.categoria import Categoria

# Importaci√≥n del esquema de salida para la API (valida y estructura la respuesta)
from app.schemas.categoria import CategoriaResponse

# Se crea una instancia del enrutador espec√≠fico para las rutas relacionadas a 'categorias'
router = APIRouter()

# Ruta GET que retorna todas las categor√≠as disponibles
@router.get("/categorias", response_model=list[CategoriaResponse])
def listar_categorias(db: Session = Depends(get_db)):
    # Realiza una consulta SQL para obtener todas las categor√≠as registradas en la base de datos
    return db.query(Categoria).all()
</file>

<file path="backend/app/routes/ciclovia.py">
from fastapi import APIRouter, Depends, Query
from sqlalchemy.orm import Session
from sqlalchemy import text
from app.database import get_db

router = APIRouter()

@router.get("/ciclovias")
def listar_ciclovias(
    proyecto_id: int = Query(None),
    comuna_id: int = Query(None),
    db: Session = Depends(get_db)
):
    condiciones = []
    if proyecto_id:
        condiciones.append(f"c.proyecto_id = {proyecto_id}")
    if comuna_id:
        condiciones.append(f"proy.comuna_id = {comuna_id}")
    
    where_clause = " AND ".join(condiciones)
    if where_clause:
        where_clause = "WHERE " + where_clause

    query = text(f"""
        SELECT 
            c.id, c.nombre, c.estado, c.sentido,
            ST_AsGeoJSON(c.geometria)::json AS geometria,
            proy.nombre AS proyecto,
            comu.nombre AS comuna
        FROM ciclovia c
        JOIN proyecto proy ON c.proyecto_id = proy.id
        JOIN comuna comu ON proy.comuna_id = comu.id
        {where_clause};
    """)

    result = db.execute(query)
    ciclovias = []
    for row in result:
        ciclovias.append({
            "id": row.id,
            "nombre": row.nombre,
            "estado": row.estado,
            "sentido": row.sentido,
            "geometria": row.geometria,
            "proyecto": row.proyecto,
            "comuna": row.comuna
        })

    return ciclovias
</file>

<file path="backend/app/routes/provincia.py">
from fastapi import APIRouter, Depends
from sqlalchemy.orm import Session
from app.database import get_db
from app.models.provincia import Provincia
from app.schemas.provincia import ProvinciaResponse

router = APIRouter()

@router.get("/provincias", response_model=list[ProvinciaResponse])
def listar_provincias(db: Session = Depends(get_db)):
    return db.query(Provincia).all()
</file>

<file path="backend/app/routes/proyecto_elementos.py">
from app.schemas.elementos import ElementosPorProyectoOut

@router.get("/elementos/por_proyecto/{proyecto_id}", response_model=ElementosPorProyectoOut)
def obtener_elementos_por_proyecto(proyecto_id: int, db: Session = Depends(get_db)):
    pavimentos = db.query(Pavimento).filter(Pavimento.proyecto_id == proyecto_id).all()
    ciclovias = db.query(Ciclovia).filter(Ciclovia.proyecto_id == proyecto_id).all()
    parques = db.query(Parque).filter(Parque.proyecto_id == proyecto_id).all()

    def parse_geom(geom):
        try:
            return mapping(wkb_loads(bytes(geom.data)))
        except Exception:
            return None

    return {
        "pavimentos": [
            {
                "id": p.id,
                "sector": p.sector,
                "estado_avance": p.estado_avance.nombre if p.estado_avance else None,
                "comuna": p.comuna.nombre if p.comuna else None,
                "geometria": parse_geom(p.geometria)
            }
            for p in pavimentos
        ],
        "ciclovias": [
            {
                "id": c.id,
                "nombre_tramo": c.nombre_tramo,
                "estado_avance": c.estado_avance.nombre if c.estado_avance else None,
                "comuna": c.comuna.nombre if c.comuna else None,
                "geometria": parse_geom(c.geometria)
            }
            for c in ciclovias
        ],
        "parques": [
            {
                "id": pq.id,
                "direccion": pq.direccion,
                "comuna": pq.comuna.nombre if pq.comuna else None,
                "superficie_ha": pq.superficie_ha,
                "geometria": parse_geom(pq.geometria)
            }
            for pq in parques
        ]
    }
</file>

<file path="backend/app/routes/usuario.py">
from fastapi import APIRouter, Depends, HTTPException, Header
from typing import Optional
from sqlalchemy.orm import Session
from app.utils.firebase_auth import verify_token

from app.database import get_db
from app.models.usuario import Usuario
from app.schemas.usuario import UsuarioResponse

router = APIRouter()

# üîê Obtener el usuario autenticado desde el token JWT
def get_current_user(
    authorization: Optional[str] = Header(None),
    db: Session = Depends(get_db)
) -> Usuario:
    if not authorization or not authorization.startswith("Bearer "):
        raise HTTPException(status_code=401, detail="Cabecera Authorization inv√°lida o faltante")

    token = authorization.replace("Bearer ", "")

    try:
        decoded = verify_token(token)
        uid = decoded["uid"]

        user = db.query(Usuario).filter(Usuario.firebase_uid == uid).first()
        if not user:
            raise HTTPException(status_code=401, detail="Usuario no registrado en la base de datos")

        return user

    except Exception as e:
        raise HTTPException(status_code=401, detail=f"Token inv√°lido: {str(e)}")


# GET /me - Retorna el usuario autenticado actual
@router.get("/me", response_model=UsuarioResponse)
def get_user_info(current_user: Usuario = Depends(get_current_user)):
    return current_user
</file>

<file path="backend/app/schemas/contratista.py">
from pydantic import BaseModel

class ContratistaOut(BaseModel):
    id: int
    nombre: str

    class Config:
        orm_mode = True
</file>

<file path="backend/app/schemas/elementos.py">
from pydantic import BaseModel
from typing import List
from app.schemas.pavimento import PavimentoOut
from app.schemas.ciclovia import CicloviaOut
from app.schemas.parque import ParqueOut

class ElementosPorProyectoOut(BaseModel):
    pavimentos: List[PavimentoOut]
    ciclovias: List[CicloviaOut]
    parques: List[ParqueOut]

    model_config = {"from_attributes": True}
</file>

<file path="backend/app/schemas/estado_avance.py">
from pydantic import BaseModel

class EstadoAvanceOut(BaseModel):
    id: int
    nombre: str

    class Config:
        orm_mode = True
</file>

<file path="backend/app/schemas/fuente_financiamiento.py">
from pydantic import BaseModel

class FuenteFinanciamientoOut(BaseModel):
    id: int
    nombre: str

    model_config = {
        "from_attributes": True
    }
</file>

<file path="backend/app/schemas/provincia.py">
from pydantic import BaseModel

class ProvinciaResponse(BaseModel):
    id: int
    nombre: str

    class Config:
        from_attributes = True
</file>

<file path="backend/app/schemas/tipo_calzada.py">
from pydantic import BaseModel

class TipoCalzadaOut(BaseModel):
    id: int
    nombre: str

    class Config:
        orm_mode = True
</file>

<file path="backend/app/schemas/usuario.py">
from pydantic import BaseModel

class UsuarioResponse(BaseModel):
    id: int
    firebase_uid: str
    nombre_usuario: str
    rol: str

    class Config:
        from_attributes = True  # Pydantic v2 reemplazo de orm_mode
</file>

<file path="frontend/.gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# production
/build

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local

npm-debug.log*
yarn-debug.log*
yarn-error.log*
</file>

<file path="frontend/public/manifest.json">
{
  "short_name": "React App",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}
</file>

<file path="frontend/public/robots.txt">
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:
</file>

<file path="frontend/README.md">
# Getting Started with Create React App

This project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).

## Available Scripts

In the project directory, you can run:

### `npm start`

Runs the app in the development mode.\
Open [http://localhost:3000](http://localhost:3000) to view it in your browser.

The page will reload when you make changes.\
You may also see any lint errors in the console.

### `npm test`

Launches the test runner in the interactive watch mode.\
See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.

### `npm run build`

Builds the app for production to the `build` folder.\
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.\
Your app is ready to be deployed!

See the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.

### `npm run eject`

**Note: this is a one-way operation. Once you `eject`, you can't go back!**

If you aren't satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.

Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you're on your own.

You don't have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn't feel obligated to use this feature. However we understand that this tool wouldn't be useful if you couldn't customize it when you are ready for it.

## Learn More

You can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).

To learn React, check out the [React documentation](https://reactjs.org/).

### Code Splitting

This section has moved here: [https://facebook.github.io/create-react-app/docs/code-splitting](https://facebook.github.io/create-react-app/docs/code-splitting)

### Analyzing the Bundle Size

This section has moved here: [https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size](https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size)

### Making a Progressive Web App

This section has moved here: [https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app](https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app)

### Advanced Configuration

This section has moved here: [https://facebook.github.io/create-react-app/docs/advanced-configuration](https://facebook.github.io/create-react-app/docs/advanced-configuration)

### Deployment

This section has moved here: [https://facebook.github.io/create-react-app/docs/deployment](https://facebook.github.io/create-react-app/docs/deployment)

### `npm run build` fails to minify

This section has moved here: [https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify](https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify)
</file>

<file path="frontend/src/App.css">
@import "leaflet/dist/leaflet.css";
@import "leaflet-draw/dist/leaflet.draw.css";


.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}
</file>

<file path="frontend/src/App.test.js">
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});
</file>

<file path="frontend/src/components/admin/CrearProyecto.js">
import FormularioProyecto from "../FormularioProyecto";
import AdminLayout from "../../layout/AdminLayout";

const CrearProyecto = () => {
  return (
    <AdminLayout>
      <div className="formulario-container">
        <h2 className="font-level-2 text-primary">
          <span className="material-symbols-outlined">add_circle</span> Crear nuevo proyecto
        </h2>
        <FormularioProyecto modoEdicion={false} />
      </div>
    </AdminLayout>
  );
};

export default CrearProyecto;
</file>

<file path="frontend/src/components/admin/EditarProyecto.js">
import { useParams } from "react-router-dom";
import FormularioProyecto from "../FormularioProyecto";
import AdminLayout from "../../layout/AdminLayout";

const EditarProyecto = () => {
  const { id } = useParams();

  return (
    <AdminLayout>
      <div className="formulario-container">
        <h2 className="font-level-2 text-primary">
          <span className="material-symbols-outlined">edit</span> Editar Proyecto
        </h2>
        <FormularioProyecto modoEdicion={true} proyectoId={id} />
      </div>
    </AdminLayout>
  );
};

export default EditarProyecto;
</file>

<file path="frontend/src/components/admin/ListaLogCambios.js">
import React from "react";
import useLogCambios from "../../hooks/useLogCambios";
import "../../css/listas.css";

const ListaLogCambios = () => {
  const logs = useLogCambios();

  return (
    <div className="lista">
      <h2 className="font-level-2">
        Historial de Cambios
      </h2>

      {logs.length === 0 ? (
        <p style={{ padding: "1rem", fontStyle: "italic" }}>
          No se encontraron registros de cambios.
        </p>
      ) : (
        <div className="tabla-scroll">
          <table>
            <thead>
              <tr>
                <th>Fecha</th>
                <th>Proyecto</th>
                <th>Usuario</th>
                <th>Acci√≥n</th>
                <th>Campo</th>
                <th>Antes</th>
                <th>Despu√©s</th>
              </tr>
            </thead>
            <tbody>
              {logs.map((log) => (
                <tr key={log.id}>
                  <td>{new Date(log.fecha).toLocaleString()}</td>
                  <td>{log.nombre_proyecto ?? `ID ${log.proyecto_id}`}</td>
                  <td>{log.nombre_usuario ?? `ID ${log.usuario_id}`}</td>
                  <td>{formatearAccion(log.accion)}</td>
                  <td>{formatearCampo(log.campo_modificado)}</td>
                  <td>{formatearValor(log.valor_anterior)}</td>
                  <td>{formatearValor(log.valor_nuevo)}</td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      )}
    </div>
  );
};

// üîß √çconos con color seg√∫n tipo de acci√≥n
function formatearAccion(accion) {
  switch (accion) {
    case "create":
      return (
        <span className="estado aprobado">
          <span className="material-symbols-outlined">add_circle</span> Creaci√≥n
        </span>
      );
    case "update":
      return (
        <span className="estado pendiente">
          <span className="material-symbols-outlined">edit</span> Edici√≥n
        </span>
      );
    case "delete":
      return (
        <span className="estado rechazado">
          <span className="material-symbols-outlined">delete</span> Eliminaci√≥n
        </span>
      );
    default:
      return accion;
  }
}

// üîß Traducci√≥n de campos t√©cnicos
function formatearCampo(campo) {
  const map = {
    estado_avance_id: "Estado de Avance",
    longitud_metros: "Longitud (m)",
    sector: "Sector",
    tipo_calzada_id: "Tipo de Calzada",
    geometria: "Geometr√≠a",
    nombre: "Nombre",
    descripcion: "Descripci√≥n",
    categoria_id: "Categor√≠a",
    estado_proyecto: "Estado del Proyecto",
  };
  return map[campo] ?? campo;
}

// üîß Formateo de valores
function formatearValor(valor) {
  if (valor === null || valor === undefined || valor === "") return "‚Äî";

  if (typeof valor === "object") {
    return (
      <pre style={{ whiteSpace: "pre-wrap", fontSize: "0.8rem", maxWidth: "250px" }}>
        {JSON.stringify(valor, null, 2)}
      </pre>
    );
  }

  if (String(valor).startsWith("0102")) {
    return (
      <span style={{ color: "#666" }}>
        <span className="material-symbols-outlined" style={{ fontSize: "16px", verticalAlign: "middle" }}>
          route
        </span>{" "}
        Geometr√≠a modificada
      </span>
    );
  }

  return valor;
}

export default ListaLogCambios;
</file>

<file path="frontend/src/components/admin/ListaParques.js">
import React, { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import api from "../../services/api";
import { useUser } from "../../context/UserContext";
import Icono from "../Icono";
import "../../css/listas.css";

const ListaParques = () => {
  const [parques, setParques] = useState([]);
  const [colapsado, setColapsado] = useState(false);
  const { perfil } = useUser();
  const navigate = useNavigate();

  useEffect(() => {
    api.get("/parques/")
      .then(res => {
        console.log("üì¶ Parques cargados:", res.data);
        setParques(res.data);
      })
      .catch(err => console.error("‚ùå Error al cargar parques:", err));
  }, []);

  const handleEditar = (id) => navigate(`/admin/editar-parque/${id}`);

  const handleEliminar = async (id) => {
    if (!window.confirm("¬øEliminar este parque?")) return;
    try {
      await api.delete(`/parques/${id}`);
      setParques(prev => prev.filter(p => p.id !== id));
    } catch (err) {
      console.error("‚ùå Error al eliminar:", err);
    }
  };

  const renderEstado = (estado) => {
    if (!estado) return (
      <span className="estado sin-estado">
        <Icono nombre="help_outline" size={18} />
        Sin estado
      </span>
    );

    const nombre = estado.toLowerCase();
    const icon = nombre === "aprobado" ? "mood" : nombre === "pendiente" ? "pending" : "cancel";
    const clase = nombre === "aprobado" ? "estado aprobado" : nombre === "pendiente" ? "estado pendiente" : "estado rechazado";

    return (
      <span className={clase}>
        <Icono nombre={icon} size={18} />
        {estado}
      </span>
    );
  };

  return (
    <div className="lista">
      <div className="titulo-colapsable" onClick={() => setColapsado(!colapsado)}>
        <h2 className="font-level-2 text-primary">
          <span className="material-symbols-outlined">park</span> Parques urbanos
        </h2>
        <button className="btn-toggle" title="Colapsar/Expandir">
          <Icono nombre={colapsado ? "expand_more" : "expand_less"} />
        </button>
      </div>

      {!colapsado && (
        <div className="tabla-scroll fade-in">
          <table className="tabla-lista">
            <thead>
              <tr>
                <th></th>
                <th>Nombre</th>
                <th>Comuna</th>
                <th>Estado</th>
                {perfil?.rol !== "visitante" && <th className="acciones-columna">Acciones</th>}
              </tr>
            </thead>
            <tbody>
              {parques.length > 0 ? (
                parques.map((p) => (
                  <tr key={p.id}>
                    <td><input type="checkbox" /></td>
                    <td>{p.nombre || "Sin nombre"}</td>
                    <td>{p.comuna?.nombre || "Sin comuna"}</td>
                    <td>{renderEstado(p.proyecto?.estado_proyecto)}</td>
                    {perfil?.rol !== "visitante" && (
                      <td>
                        <div className="btn-acciones">
                          <button className="btn-icono" onClick={() => p.editable && handleEditar(p.id)} disabled={!p.editable}>
                            <span className="material-symbols-outlined">edit</span>
                          </button>
                          {perfil.rol === "admin" && (
                            <button className="btn-icono btn-eliminar" onClick={() => handleEliminar(p.id)}>
                              <span className="material-symbols-outlined">delete</span>
                            </button>
                          )}
                        </div>
                      </td>
                    )}
                  </tr>
                ))
              ) : (
                <tr><td colSpan="5">No hay parques registrados.</td></tr>
              )}
            </tbody>
          </table>
        </div>
      )}
    </div>
  );
};

export default ListaParques;
</file>

<file path="frontend/src/components/admin/ListaProyectosPendientes.js">
import React, { useEffect, useState } from "react";
import axios from "axios";
import { useUser } from "../../context/UserContext";
import toast from "react-hot-toast";


function ListaProyectosPendientes() {
  const [proyectos, setProyectos] = useState([]);
  const { perfil } = useUser();

  useEffect(() => {
    if (perfil.rol === "admin") {
      axios
        .get("/api/proyectos/pendientes")
        .then((res) => setProyectos(res.data))
        .catch(() => toast.error("Error al cargar proyectos pendientes"));
    }
  }, [perfil]);

  const manejarAccion = (id, accion) => {
    const url = `/api/proyectos/${id}/${accion}`;
    axios
      .put(url)
      .then((res) => {
        toast.success(res.data.mensaje || "Acci√≥n realizada");
        setProyectos(proyectos.filter((p) => p.id !== id));
      })
      .catch(() => toast.error("Error al actualizar estado del proyecto"));
  };

  return (
    <div>
      <h2 className="font-level-2 text-primary">Proyectos pendientes</h2>
      {proyectos.length === 0 ? (
        <p>No hay proyectos pendientes.</p>
      ) : (
        <table className="table table-sm mt-3">
          <thead>
            <tr>
              <th>Nombre</th>
              <th>Categor√≠a</th>
              <th>Acciones</th>
            </tr>
          </thead>
          <tbody>
            {proyectos.map((proyecto) => (
              <tr key={proyecto.id}>
                <td>{proyecto.nombre}</td>
                <td>{proyecto.categoria?.nombre || "-"}</td>
                <td>
                  <button
                    onClick={() => manejarAccion(proyecto.id, "aprobar")}
                    className="btn btn-green btn-sm mr-2"
                  >
                    Aprobar
                  </button>
                  <button
                    onClick={() => manejarAccion(proyecto.id, "rechazar")}
                    className="btn btn-secondary btn-sm"
                  >
                    Rechazar
                  </button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      )}
    </div>
  );
}

export default ListaProyectosPendientes;
</file>

<file path="frontend/src/components/BuscadorProyectos.js">
// src/components/BuscadorProyectos.js
import { useState } from "react";

function BuscadorProyectos({ proyectos, onFiltrar }) {
  const [query, setQuery] = useState("");

  const handleChange = (e) => {
    const valor = e.target.value.toLowerCase();
    setQuery(valor);

    const filtrados = proyectos.filter((p) => {
      const nombre = p.nombre?.toLowerCase() || "";
      const comuna = p.comuna?.nombre?.toLowerCase() || "";
      const categoria = p.categoria?.nombre?.toLowerCase() || "";

      return (
        nombre.includes(valor) ||
        comuna.includes(valor) ||
        categoria.includes(valor)
      );
    });

    onFiltrar(filtrados);
  };

  return (
    <div className="buscador-proyectos">
      <input
        type="text"
        placeholder="Buscar por nombre, comuna o categor√≠a"
        value={query}
        onChange={handleChange}
      />
    </div>
  );
}

export default BuscadorProyectos;
</file>

<file path="frontend/src/components/EditarParque.js">
import AdminLayout from "../layout/AdminLayout";
import FormularioParque from "./FormularioParque";
import { useParams } from "react-router-dom";

const EditarParque = () => {
  const { id } = useParams();

  return (
    <AdminLayout>
      <FormularioParque modoEdicion={true} parqueId={id} />
    </AdminLayout>
  );
};

export default EditarParque;
</file>

<file path="frontend/src/components/Icono.js">
function Icono({ nombre, size = 24, color = "#333", peso = "regular" }) {
  return (
    <span
      className="material-symbols-outlined"
      style={{
        fontSize: `${size}px`,
        color: color,
        fontVariationSettings: `'wght' ${peso === "bold" ? 700 : 400}`,
        verticalAlign: "middle",
      }}
      aria-hidden="true"
    >
      {nombre}
    </span>
  );
}

export default Icono;
</file>

<file path="frontend/src/components/LeyendaMapa.js">
import { useState } from "react";
import "../css/LeyendaMapa.css";

const leyenda = [
  { tipo: "Pavimento", color: "#007BFF", icono: "directions_car" },
  { tipo: "Ciclov√≠a", color: "#2D717C", icono: "pedal_bike" },
  { tipo: "Parque", color: "#FFA11B", icono: "park" },
];

export default function LeyendaMapa({ sidebarMinimizada }) {
  const [abierto, setAbierto] = useState(true);

  const clases = `leyenda-mapa sombra-suave ${abierto ? "" : "leyenda-colapsada"} ${sidebarMinimizada ? "modo-movil" : "modo-sidebar"}`;

  return (
    <div className={clases}>
      <button className="btn-toggle " onClick={() => setAbierto(!abierto)}>
        <span className="material-symbols-outlined text-gray-b ">
          {abierto ? "expand_more" : "expand_less"}
        </span>
        <span className="font-level-8 ">Leyenda</span>
      </button>
      {abierto && (
        <ul className="lista-leyenda">
          {leyenda.map((item) => (
            <li key={item.tipo}>
              <span className="cuadro-color" style={{ backgroundColor: item.color }}></span>
              <span className="material-symbols-outlined">{item.icono}</span>
              <span>{item.tipo}</span>
            </li>
          ))}
        </ul>
      )}
    </div>
  );
}
</file>

<file path="frontend/src/components/LoadingScreen.js">
// src/components/LoadingScreen.js
import "../css/loading.css";

export default function LoadingScreen() {
  return (
    <div className="loading-container">
      <div className="spinner"></div>
      <p className="loading-text">Cargando sistema...</p>
    </div>
  );
}
</file>

<file path="frontend/src/components/MapaProyectos.js">
import React, { useState, useEffect } from "react";
import { MapContainer, TileLayer, GeoJSON, useMap } from "react-leaflet";
import L from "leaflet";
import "leaflet/dist/leaflet.css";
import ZoomControl from "./ZoomControl";
import LeyendaMapa from "./LeyendaMapa";

const colorPorTipo = (tipo) => {
  const tipoNormalizado = tipo?.toString().trim().toLowerCase()
    .normalize("NFD").replace(/[\u0300-\u036f]/g, "");

  switch (tipoNormalizado) {
    case "pavimento": return "#007BFF";
    case "ciclovia": return "#2D717C";
    case "parque": return "#FFA11B";
    default: return "#555";
  }
};

function ResetViewButton({ center, zoom, limpiarCapas, position = "topright" }) {
  const map = useMap();

  useEffect(() => {
    const button = L.DomUtil.create("button", "leaflet-bar leaflet-control material-symbols-outlined");
    button.textContent = "refresh";
    button.title = "Resetear vista";
    Object.assign(button.style, {
      backgroundColor: "var(--white)",
      color: "var(--gray-a)",
      width: "34px",
      height: "34px",
      fontSize: "20px",
      cursor: "pointer",
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      padding: "0",
    });

    const container = L.DomUtil.create("div", `leaflet-${position}`);
    container.appendChild(button);

    const ControlReset = L.Control.extend({ onAdd: () => container, onRemove: () => {} });
    const control = new ControlReset({ position });
    control.addTo(map);

    button.onclick = () => {
      map.setView(center, zoom);
      if (limpiarCapas) limpiarCapas();
    };

    return () => {
      map.removeControl(control);
    };
  }, [map, center, zoom, limpiarCapas, position]);

  return null;
}

function ToggleStyleButton({ estiloMapa, setEstiloMapa, position = "bottomright" }) {
  const map = useMap();

  useEffect(() => {
    const button = L.DomUtil.create("button", "leaflet-bar leaflet-control material-symbols-outlined");
    button.textContent = "contrast";
    button.title = "Cambiar estilo";
    Object.assign(button.style, {
      backgroundColor: "var(--white)",
      color: "var(--gray-a)",
      width: "34px",
      height: "34px",
      fontSize: "20px",
      cursor: "pointer",
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      padding: "0",
    });

    const container = L.DomUtil.create("div", `leaflet-${position}`);
    container.appendChild(button);

    const ControlStyle = L.Control.extend({ onAdd: () => container, onRemove: () => {} });
    const control = new ControlStyle({ position });
    control.addTo(map);

    button.onclick = () => setEstiloMapa(estiloMapa === "positron" ? "dark" : "positron");

    return () => {
      map.removeControl(control);
    };
  }, [map, estiloMapa, setEstiloMapa, position]);

  return null;
}

function MapaProyectos({ capas = [], limpiarCapas, sidebarMinimizada }) {
  const [mapCenter, setMapCenter] = useState([-36.82, -73.05]);
  const initialZoom = 12;
  const [mapInstance, setMapInstance] = useState(null);
  const [estiloMapa, setEstiloMapa] = useState("positron");

  useEffect(() => {
    navigator.geolocation.getCurrentPosition(
      (pos) => setMapCenter([pos.coords.latitude, pos.coords.longitude]),
      () => console.warn("üìç No se pudo obtener la ubicaci√≥n"),
      { enableHighAccuracy: true }
    );
  }, []);

  useEffect(() => {
    if (mapInstance && capas.length > 0) {
      const bounds = L.latLngBounds([]);
      capas.forEach(({ data }) => {
        if (data?.features?.length > 0) {
          const layer = L.geoJSON(data);
          bounds.extend(layer.getBounds());
        }
      });
      if (bounds.isValid()) {
        mapInstance.fitBounds(bounds, { padding: [30, 30] });
      }
    }
  }, [capas, mapInstance]);

  const mapStyleURL =
    estiloMapa === "positron"
      ? "https://api.maptiler.com/maps/dataviz/256/{z}/{x}/{y}.png?key=O8YcZts6MT1e0Gu0XMnr"
      : "https://api.maptiler.com/maps/positron/256/{z}/{x}/{y}.png?key=O8YcZts6MT1e0Gu0XMnr";

  return (
    <MapContainer
      center={mapCenter}
      zoom={initialZoom}
      zoomControl={false}
      style={{ height: "100%", width: "100%" }}
      whenCreated={setMapInstance}
    >
      <TileLayer url={mapStyleURL} />
      <ZoomControl position="bottomright" />
      <ResetViewButton center={mapCenter} zoom={initialZoom} limpiarCapas={limpiarCapas} />
      <ToggleStyleButton estiloMapa={estiloMapa} setEstiloMapa={setEstiloMapa} />

      {(capas || []).map(({ tipo, data }, i) =>
        data?.features?.length > 0 && (
          <GeoJSON
            key={`${tipo}-${i}`}
            data={data}
            style={{ color: colorPorTipo(tipo), weight: 3, fillOpacity: 0.4 }}
            onEachFeature={(feature, layer) => {
              const props = feature.properties || {};
              const tipo = props.tipo?.toLowerCase();

              let contenido = "";

              if (tipo === "pavimento") {
                contenido = `
                  <div class="popup-proyecto">
                    <strong>${props.nombre || "Pavimento"}</strong><br/>
                    <b>Sector:</b> ${props.sector || "N/A"}<br/>
                    <b>Longitud:</b> ${props.longitud_metros || 0} m<br/>
                    <b>Estado:</b> ${props.estado_avance || "N/A"}
                  </div>`;
              } else if (tipo === "ciclovia") {
                contenido = `
                  <div class="popup-proyecto">
                    <strong>${props.nombre || "Ciclov√≠a"}</strong><br/>
                    <b>Tramo:</b> ${props.nombre_tramo || "N/A"}<br/>
                    <b>Longitud:</b> ${props.longitud_metros || 0} m<br/>
                    <b>Estado:</b> ${props.estado_avance || "N/A"}
                  </div>`;
              } else if (tipo === "parque") {
                contenido = `
                  <div class="popup-proyecto">
                    <strong>${props.nombre || "Parque"}</strong><br/>
                    <b>Sector:</b> ${props.sector || "N/A"}<br/>
                    <b>Superficie:</b> ${props.superficie_ha || 0} ha<br/>
                    <b>Financiamiento:</b> ${props.fuente_financiamiento || "N/A"}
                  </div>`;
              } else {
                contenido = `
                  <div class="popup-proyecto">
                    <strong>${props.nombre || "Proyecto"}</strong><br/>
                    <b>Tipo:</b> ${tipo || "Desconocido"}
                  </div>`;
              }

              layer.bindPopup(contenido);
            }}
          />
        )
      )}

      {capas?.length > 0 && <LeyendaMapa sidebarMinimizada={sidebarMinimizada} />}
    </MapContainer>
  );
}

export default MapaProyectos;
</file>

<file path="frontend/src/css/adminlayout.css">
.admin-layout {
    display: flex;
    min-height: 100vh;
  }
  
  .admin-content {
    flex: 1;
    padding: 2rem;
    background-color: #f9f9f9;
  }
</file>

<file path="frontend/src/css/filtroModal.css">
.modal-overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(30, 30, 30, 0.6);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 999;
  font-family: var(--font-base);
}

.modal-content {
  background: var(--white);
  width: 90%;
  max-width: 480px;
  border: 2px solid var(--accent);
  border-radius: 8px;
  box-shadow: 0 8px 24px rgba(0, 0, 0, 0.2);
  animation: fadeIn 0.3s ease-in-out;
  overflow: hidden;
}

.modal-header {
  background-color: var(--neutral);
  padding: 1rem 1.25rem;
  font-weight: 600;
  font-size: 1.15rem;
  display: flex;
  justify-content: space-between;
  align-items: center;
  color: var(--primary);
  border-bottom: 1px solid var(--accent);
}

.link-clear {
  background: none;
  border: none;
  color: var(--secondary);
  font-weight: 600;
  font-size: 0.95rem;
  cursor: pointer;
  transition: color 0.2s ease;
}

.link-clear:hover {
  color: #a00011;
}

.modal-body {
  padding: 1rem 1.25rem;
  display: flex;
  flex-wrap: wrap;
  gap: 10px;
}

.filtro-item {
  background-color: var(--neutral);
  border: 1px solid var(--accent);
  padding: 6px 12px;
  border-radius: 16px;
  font-size: 0.9rem;
  color: var(--gray-a);
  display: flex;
  align-items: center;
}

.filtro-item button {
  margin-left: 8px;
  background: none;
  border: none;
  font-size: 1rem;
  cursor: pointer;
  color: var(--gray-b);
}

.modal-footer {
  padding: 1rem 1.25rem;
  display: flex;
  justify-content: flex-end;
  gap: 10px;
  border-top: 1px solid var(--accent);
}

.btn-cancelar,
.btn-aceptar {
  padding: 0.5rem 1.2rem;
  font-size: 0.95rem;
  border-radius: 6px;
  font-weight: 500;
  cursor: pointer;
  border: 1px solid transparent;
  transition: background-color 0.2s ease, border-color 0.2s ease;
}

.btn-cancelar {
  background-color: var(--neutral);
  color: var(--black);
  border: 1px solid var(--gray-b);
}

.btn-cancelar:hover {
  background-color: #e2e2e2;
}

.btn-aceptar {
  background-color: var(--primary);
  color: var(--white);
  border: 1px solid #004080;
}

.btn-aceptar:hover {
  background-color: #003f7f;
}

.filtro-fab {
  position: fixed;
  bottom: 20px;
  left: 20px;
  z-index: 1100;
  background-color: var(--primary);
  color: var(--white);
  border: none;
  border-radius: 4px;
  padding: 12px 20px;
  font-size: 1rem;
  font-weight: 600;
  cursor: pointer;
  transition: background-color 0.3s ease;
}

.filtro-fab:hover {
  background-color: var(--primary-dark);

}
</file>

<file path="frontend/src/css/LeyendaMapa.css">
.leyenda-mapa {
  background: var(--white);
  border: 1px solid var(--gray-b);
  border-radius: 10px;
  padding: 12px 16px;
  font-family: var(--font-base);
  font-size: 0.9rem;
  z-index: 1000;
  transition: all 0.3s ease;
}

.sombra-suave {
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
}

.btn-toggle {
  background: none;
  border: none;
  color: var(--gray-a);
  font-weight: 600;
  cursor: pointer;
  display: flex;
  align-items: center;
  gap: 6px;
  font-family: var(--font-base);
  font-size: 1rem;
  padding: 0;
}

.lista-leyenda {
  list-style: none;
  padding: 10px 0 0;
  margin: 0;
}

.lista-leyenda li {
  display: flex;
  align-items: center;
  gap: 10px;
  margin-bottom: 8px;
}

.cuadro-color {
  width: 16px;
  height: 16px;
  border-radius: 3px;
  border: 1px solid #999;
  display: inline-block;
}

.modo-sidebar {
  position: absolute;
  bottom: 30px;
  left: 300px;
}

.modo-movil {
  position: absolute;
  bottom: 30px;
  left: 80px;
}

@media (max-width: 768px) {
  .modo-sidebar {
    left: 20px !important;
  }
}

.leyenda-colapsada {
  padding: 10px 12px;
  border-radius: 20px;
}
</file>

<file path="frontend/src/css/loading.css">
/* src/css/loading.css */
.loading-container {
    height: 100vh;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    background-color: var(--neutral); /* color institucional */
  }
  
  .spinner {
    width: 48px;
    height: 48px;
    border: 5px solid var(--accent);
    border-top: 5px solid var(--primary);
    border-radius: 50%;
    animation: spin 1s linear infinite;
  }
  
  .loading-text {
    margin-top: 1rem;
    font-size: 1.2rem;
    color: var(--gray-a);
    font-family: var(--font-base);
  }
  
  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }
</file>

<file path="frontend/src/css/login.css">
/* Estilo base */
body, html, #root {
    height: 100%;
    margin: 0;
    background-color: #e9eef3;
    font-family: 'Roboto', sans-serif;
  }
  
  /* Contenedor centrado */
  .login-container {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100%;
  }
  
  /* Tarjeta de login */
  .login-card {
    background-color: #fff;
    padding: 40px 30px;
    border-radius: 10px;
    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.1);
    width: 100%;
    max-width: 400px;
  }
  
  .login-card h2 {
    font-size: 22px;
    font-weight: 700;
    margin-bottom: 24px;
    color: #111;
    display: flex;
    align-items: center;
    gap: 10px;
  }
  
  .login-card h2::before {
    content: "üîí";
    font-size: 24px;
  }
  
  /* Inputs */
  .login-card label {
    font-weight: 500;
    margin-bottom: 6px;
    display: block;
    color: #222;
  }
  
  .login-card input {
    width: 100%;
    padding: 10px 12px;
    border: 1px solid #ccc;
    border-radius: 6px;
    margin-bottom: 20px;
    font-size: 14px;
  }
  
  .login-card input:focus {
    outline: 2px solid #0055A5;
    border-color: #0055A5;
  }
  
  /* Bot√≥n */
  .login-card button {
    width: 100%;
    padding: 12px;
    background-color: #0064b1;
    color: white;
    font-weight: bold;
    font-size: 15px;
    border: none;
    border-radius: 6px;
    cursor: pointer;
    transition: background-color 0.2s ease;
  }
  
  .login-card button:hover {
    background-color: #004b8d;
  }
  
  /* Mensaje de error */
  .error-msg {
    background-color: #ffe5e5;
    color: #d10000;
    padding: 10px;
    margin-bottom: 16px;
    border-radius: 6px;
    font-size: 14px;
  }
</file>

<file path="frontend/src/css/map-controls.css">
/* üéØ Estilos de botones personalizados del mapa */
.zoom-control-custom,
.leaflet-bar.leaflet-control button,
.leaflet-bar.leaflet-control .material-symbols-outlined {
  background-color: var(--white);
  color: var(--gray-a);
  border: none;
  font-size: 20px;
  padding: 6px;
  text-align: center;
  cursor: pointer;
  user-select: none;
  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
  display: flex;
  align-items: center;
  justify-content: center;
}



.zoom-control-custom a:hover,
.leaflet-bar.leaflet-control button:hover {
  background-color: var(--neutral);
}

/* Botones laterales (reset, estilo) */
.leaflet-control.custom-control-box {
    display: flex;
    flex-direction: column;
    gap: 4px;
  }
  

.leaflet-top.leaflet-right .leaflet-control,
.leaflet-bottom.leaflet-right .leaflet-control {
  margin-top: 80px;
}

.material-symbols-outlined {
  font-size: 20px;
}
</file>

<file path="frontend/src/css/sidebarvisor.css">
/* === Sidebar === */
.sidebar {
    position: fixed;
    top: 0;
    left: 0;
    width: 280px;
    height: 100vh;
    background-color: var(--white);
    border-right: 1px solid var(--accent);
    box-shadow: 2px 0 8px rgba(0, 0, 0, 0.05);
    transition: width 0.3s ease, transform 0.3s ease-in-out;
    z-index: 1000;
    overflow-y: hidden;
  }
  
  .sidebar.minimizada {
    width: 60px;
    padding: 10px 8px;
  }
  
  .sidebar.minimizada .sidebar-logo,
  .sidebar.minimizada .buscador-wrapper,
  .sidebar.minimizada .sidebar-contenido {
    display: none;
  }
  
  /* === Bot√≥n minimizar === */
  .toggle-sidebar-visor {
    position: absolute;
    top: 20px;
    right: 12px;
    background: var(--accent);
    color: var(--white);
    border: none;
    border-radius: 50%;
    width: 34px;
    height: 34px;
    font-size: 18px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    z-index: 3100;
  }
  
  /* === Logo === */
  .sidebar-logo {
    text-align: center;
    padding: 2rem 1rem 0rem 1rem;
    background-color: var(--primary);
  }
  
  .logo-sidebar {
    max-height: 80px;
    width: auto;
    object-fit: contain;
    display: block;
  }
  
  /* === Buscador === */
  .buscador-wrapper {
    background-color: var(--primary);
    padding: 1rem 1rem 2rem 1rem;
    border-bottom: 1px solid var(--accent);
  }
  
  .input-icon-container-sidebar {
    position: relative;
    margin-top: 0.6rem;
  }
  
  .input-busqueda-sidebar {
    width: 100%;
    padding: 0.5rem; 
    border-radius: 6px;
    border: 1px solid var(--gray-b);
    font-size: 1rem;
  }
  
  /* Icono dentro del input */
  .input-icon-container-sidebar .material-symbols-outlined {
    position: absolute;
    right: 10px;
    top: 50%;
    transform: translateY(-50%);
    font-size: 20px;
    color: var(--gray-b);
    pointer-events: none;
  }
  
  
  /* === Contenido === */
  .sidebar-contenido {
    display: flex;
    flex-direction: column;
    gap: 10px;
    padding: 1.5rem 1rem;
    overflow: visible;
  }
  
  /* === Botones === */
  .btn-buscar,
  .btn-limpiar {
    padding: 10px 14px;
    border-radius: 6px;
    font-size: 14px;
    cursor: pointer;
    display: flex;
    align-items: center;
    gap: 8px;
    justify-content: center;
    font-weight: bold;
  }
  
  .btn-buscar {
    background-color: var(--primary);
    color: var(--white);
    border: none;
  }
  
  .btn-buscar:hover {
    background-color: var(--primary-dark);
  }
  
  .btn-limpiar {
    background-color: var(--neutral);
    color: var(--gray-a);
    border: 1px solid var(--gray-b);
  }
  
  .btn-limpiar:hover {
    background-color: #dddddd;
    color: var(--black);
  }
  
  /* === Mensaje === */
  .mensaje-info {
    display: flex;
    align-items: center;
    gap: 10px;
    margin-top: 1rem;
    background-color: var(--neutral);
    border-left: 4px solid var(--primary);
    border-radius: 4px;
    font-size: 14px;
    color: var(--black);
    padding: 12px 16px;
  }
  
  .mensaje-info.cargando {
    border-left-color: var(--tertiary);
    color: var(--gray-a);
    font-style: italic;
  }
  
  /* === Responsive === */
  @media screen and (max-width: 768px) {
    .sidebar {
      transform: translateX(-100%);
    }
  
    .sidebar.minimizada {
      transform: translateX(-215px);
    }
  
    .toggle-sidebar {
      position: fixed;
      top: 20px;
      left: 10px;
      z-index: 1100;
      width: 40px;
      height: 40px;
      font-size: 18px;
    }
  }
  
  /* === Fix react-select === */
  .Select__menu,
  .css-1nmdiq5-menu,
  .css-26l3qy-menu {
    z-index: 9999 !important;
  }
</file>

<file path="frontend/src/hooks/useElementosPorProyecto.js">
// src/hooks/useElementosPorProyecto.js
import { useEffect, useState } from "react";
import axios from "../services/auth";

const useElementosPorProyecto = (proyectoId) => {
  const [datos, setDatos] = useState({ pavimentos: [], ciclovias: [], parques: [] });
  const [cargando, setCargando] = useState(true);

  useEffect(() => {
    if (!proyectoId) return;

    setCargando(true);
    axios
      .get(`/elementos/por_proyecto/${proyectoId}`)
      .then((res) => setDatos(res.data))
      .catch((err) => {
        console.error("Error al obtener elementos:", err);
        setDatos({ pavimentos: [], ciclovias: [], parques: [] });
      })
      .finally(() => setCargando(false));
  }, [proyectoId]);

  return { ...datos, cargando };
};

export default useElementosPorProyecto;
</file>

<file path="frontend/src/hooks/useLogCambios.js">
// src/hooks/useLogCambios.js
import { useEffect, useState } from "react";
import axios from "../services/api";

const useLogCambios = () => {
  const [logs, setLogs] = useState([]);

  useEffect(() => {
    const fetchLogs = async () => {
      try {
        const response = await axios.get("/log_cambios/");
        setLogs(response.data);
      } catch (error) {
        console.error("Error al cargar log de cambios:", error);
      }
    };

    fetchLogs();
  }, []);

  return logs;
};

export default useLogCambios;
</file>

<file path="frontend/src/hooks/usePavimentosPorProyecto.js">
// src/hooks/usePavimentosPorProyecto.js
import { useEffect, useState } from "react";
import axios from "../services/auth"; // usa instancia con token si es necesario

const usePavimentosPorProyecto = (proyectoId) => {
  const [pavimentos, setPavimentos] = useState([]);
  const [cargando, setCargando] = useState(true);

  useEffect(() => {
    if (!proyectoId) return;

    setCargando(true);
    axios
      .get(`/pavimentos/por_proyecto/${proyectoId}`)
      .then((res) => setPavimentos(res.data))
      .catch((err) => console.error("Error al obtener pavimentos:", err))
      .finally(() => setCargando(false));
  }, [proyectoId]);

  return { pavimentos, cargando };
};

export default usePavimentosPorProyecto;
</file>

<file path="frontend/src/hooks/useTotales.js">
// src/hooks/useTotales.js
import { useEffect, useState } from "react";
import axios from "../services/auth"; // usa token si aplica

const useTotales = () => {
  const [totales, setTotales] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    axios
      .get("/proyectos/publicos/totales")
      .then((res) => setTotales(res.data))
      .catch((err) => {
        console.error("Error al obtener totales:", err);
        setTotales(null);
      })
      .finally(() => setLoading(false));
  }, []);

  return { totales, loading };
};

export default useTotales;
</file>

<file path="frontend/src/index.css">
html, body, #root {
  height: 100%;
  margin: 0;
  padding: 0;
}

body {
  font-family: 'Roboto', 'Helvetica Neue', sans-serif;
  background-color: #e9eef3;
  color: #1e1e1e;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New', monospace;
}
</file>

<file path="frontend/src/logo.svg">
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 841.9 595.3"><g fill="#61DAFB"><path d="M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z"/><circle cx="420.9" cy="296.5" r="45.7"/><path d="M520.5 78.1z"/></g></svg>
</file>

<file path="frontend/src/pages/Login.js">
import { useState } from "react";
import { auth } from "../services/firebase";
import { signInWithEmailAndPassword } from "firebase/auth";
import { useNavigate } from "react-router-dom";
import "../css/login.css";

const Login = () => {
  const [email, setEmail] = useState("");
  const [contrasena, setContrasena] = useState("");
  const [error, setError] = useState("");
  const navigate = useNavigate();

  const handleLogin = async (e) => {
    e.preventDefault();
    setError("");

    try {
      await signInWithEmailAndPassword(auth, email, contrasena);
      navigate("/admin");
    } catch (err) {
      setError("Correo o contrase√±a incorrectos.");
    }
  };

  return (
    <div className="login-container">
      <div className="login-card">
        <h2>Iniciar sesi√≥n</h2>

        {error && <div className="error-msg">{error}</div>}

        <form onSubmit={handleLogin}>
          <label htmlFor="email">Correo electr√≥nico</label>
          <input
            type="email"
            id="email"
            placeholder="ejemplo@correo.com"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            required
          />

          <label htmlFor="contrasena">Contrase√±a</label>
          <input
            type="password"
            id="contrasena"
            value={contrasena}
            onChange={(e) => setContrasena(e.target.value)}
            required
          />

          <button type="submit">Iniciar sesi√≥n</button>
        </form>
      </div>
    </div>
  );
};

export default Login;
</file>

<file path="frontend/src/reportWebVitals.js">
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;
</file>

<file path="frontend/src/services/firebase.js">
// src/services/firebase.js

import { initializeApp } from "firebase/app";
import { getAuth } from "firebase/auth";



const firebaseConfig = {
  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,
  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,
  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,
  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,
  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,
  appId: process.env.REACT_APP_FIREBASE_APP_ID,
};

const app = initializeApp(firebaseConfig);
export const auth = getAuth(app);
</file>

<file path="frontend/src/setupTests.js">
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';
</file>

<file path="frontend/src/utils/validarGeoJSON.js">
// src/utils/validarGeoJSON.js

export function validarLineString(str) {
    try {
      const obj = JSON.parse(str);
      if (
        obj.type !== "LineString" ||
        !Array.isArray(obj.coordinates) ||
        obj.coordinates.length < 2
      ) {
        return false;
      }
      return obj.coordinates.every(coord =>
        Array.isArray(coord) &&
        coord.length === 2 &&
        typeof coord[0] === "number" &&
        typeof coord[1] === "number"
      );
    } catch {
      return false;
    }
  }
  
  export function validarPolygon(str) {
    try {
      const obj = JSON.parse(str);
      if (obj.type !== "Polygon" || !Array.isArray(obj.coordinates)) {
        return false;
      }
      const rings = obj.coordinates;
      return rings.every(ring =>
        Array.isArray(ring) &&
        ring.length >= 4 &&
        ring[0][0] === ring[ring.length - 1][0] && // Primer y √∫ltimo punto iguales
        ring[0][1] === ring[ring.length - 1][1]
      );
    } catch {
      return false;
    }
  }
  
  export function validarPoint(str) {
    try {
      const obj = JSON.parse(str);
      return (
        obj.type === "Point" &&
        Array.isArray(obj.coordinates) &&
        obj.coordinates.length === 2 &&
        typeof obj.coordinates[0] === "number" &&
        typeof obj.coordinates[1] === "number"
      );
    } catch {
      return false;
    }
  }
</file>

<file path=".gitignore">
# ‚öôÔ∏è Archivos de entorno
.env
.env.local
frontend/.env
backend/.env

# üîê Claves sensibles (Firebase u otros)
backend/app/utils/firebase_key.json

# üêç Python
__pycache__/
*.py[cod]
*.sqlite3
*.log
*.db

# üì¶ Node.js
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# üìÅ Vite / React / CRA build
frontend/build/
dist/
.cache/
.DS_Store

# üîß VSCode y editor config
.vscode/
.idea/
*.swp

# üôÖ Otros
*.bak
*.tmp
</file>

<file path="backend/app/middleware/auth_middleware.py">
from starlette.middleware.base import BaseHTTPMiddleware
from fastapi import Request
from app.database import SessionLocal
from app.models import Usuario
from app.utils.firebase_auth import verify_token

class AuthMiddleware(BaseHTTPMiddleware):
    async def dispatch(self, request: Request, call_next):
        path = request.url.path

        # üü¢ Rutas p√∫blicas del visor
        rutas_publicas = [
            "/api/proyectos/publicos",
            "/api/parques/publicos",
            "/api/ciclovias/publicos",
            "/api/comunas",
            "/api/categorias",
            "/api/estado-avance",
        ]

        if any(path.startswith(ruta) for ruta in rutas_publicas):
            return await call_next(request)

        # üîí Para panel admin u otras rutas privadas
        auth_header = request.headers.get("Authorization")

        if auth_header and auth_header.startswith("Bearer "):
            token = auth_header.split(" ")[1]
            try:
                decoded_token = verify_token(token)
                firebase_uid = decoded_token.get("uid")

                with SessionLocal() as db:
                    user = db.query(Usuario).filter(Usuario.firebase_uid == firebase_uid).first()

                if user:
                    request.state.user = {
                        "usuario_id": user.id,
                        "rol": user.rol,
                        "uid": user.firebase_uid,
                        "nombre_usuario": user.nombre_usuario
                    }
                else:
                    request.state.user = None
            except Exception as e:
                print("‚ö†Ô∏è Middleware: error verificando token:", str(e))
                request.state.user = None
        else:
            request.state.user = None

        return await call_next(request)
</file>

<file path="backend/app/models/__init__.py">
from .region import Region
from .provincia import Provincia
from .comuna import Comuna
from .categoria import Categoria
from .usuario import Usuario
from .proyecto import Proyecto
from .documento import Documento
from .log_cambios import LogCambios 
from .pavimento import Pavimento
from .ciclovia import Ciclovia
from .parque import Parque
from .estado_avance import EstadoAvance
from .tipo_calzada import TipoCalzada
from .tipo_pavimento import TipoPavimento
from .tipo_ciclovia import TipoCiclovia
from .contratista import Contratista
from .fuente_financiamiento import FuenteFinanciamiento
</file>

<file path="backend/app/models/categoria.py">
from sqlalchemy import Column, Integer, String, Text
from sqlalchemy.orm import relationship
from app.database import Base

class Categoria(Base):
    __tablename__ = "categoria"

    id = Column(Integer, primary_key=True, index=True)
    nombre = Column(String, nullable=False)
    descripcion = Column(Text)

    proyectos = relationship("Proyecto", back_populates="categoria")
</file>

<file path="backend/app/models/fuente_financiamiento.py">
from sqlalchemy import Column, Integer, String
from app.database import Base

class FuenteFinanciamiento(Base):
    __tablename__ = "fuente_financiamiento"
    id = Column(Integer, primary_key=True, index=True)
    nombre = Column(String, nullable=False)
</file>

<file path="backend/app/models/log_cambios.py">
# backend/app/models/log_cambios.py

from sqlalchemy import Column, Integer, String, DateTime, ForeignKey, Text
from sqlalchemy.orm import relationship
from datetime import datetime
from app.database import Base

class LogCambios(Base):
    __tablename__ = "log_cambios"

    id = Column(Integer, primary_key=True, index=True)
    fecha = Column(DateTime, default=datetime.utcnow)

    proyecto_id = Column(Integer, ForeignKey("proyecto.id"))
    usuario_id = Column(Integer, ForeignKey("usuario.id"))

    accion = Column(String)
    campo_modificado = Column(String)
    valor_anterior = Column(Text)
    valor_nuevo = Column(Text)

    proyecto = relationship("Proyecto")
    usuario = relationship("Usuario")
</file>

<file path="backend/app/models/proyecto.py">
from sqlalchemy import Column, Integer, String, Text, ForeignKey, Boolean, DateTime, Enum
from sqlalchemy.orm import relationship
from app.database import Base  # ‚úÖ obligatorio
import enum
from datetime import datetime


class EstadoProyectoEnum(enum.Enum):
    pendiente = "pendiente"
    aprobado = "aprobado"
    rechazado = "rechazado"


class Proyecto(Base):
    __tablename__ = "proyecto"

    id = Column(Integer, primary_key=True, index=True)
    nombre = Column(String, nullable=False)
    descripcion = Column(Text)
    categoria_id = Column(Integer, ForeignKey("categoria.id"))
    estado_proyecto = Column(Enum(EstadoProyectoEnum), nullable=False, default=EstadoProyectoEnum.pendiente)
    elim_pendiente = Column(Boolean, default=False)
    fecha_creacion = Column(DateTime, default=datetime.utcnow)
    fecha_aprobacion = Column(DateTime, nullable=True)
    creado_por_id = Column(Integer, ForeignKey("usuario.id"))
    aprobado_por_id = Column(Integer, ForeignKey("usuario.id"), nullable=True)
    proyecto_padre_id = Column(Integer, ForeignKey("proyecto.id"), nullable=True)

    # Relaciones
    categoria = relationship("Categoria", back_populates="proyectos")
    creado_por = relationship("Usuario", foreign_keys=[creado_por_id], back_populates="proyectos_creados")
    aprobado_por = relationship("Usuario", foreign_keys=[aprobado_por_id], back_populates="proyectos_aprobados")
    documentos = relationship("Documento", back_populates="proyecto", cascade="all, delete")
    parques = relationship("Parque", back_populates="proyecto", cascade="all, delete")
    pavimentos = relationship("Pavimento", back_populates="proyecto", cascade="all, delete")
    ciclovias = relationship("Ciclovia", back_populates="proyecto", cascade="all, delete")

    # Relaci√≥n recursiva
    proyecto_padre = relationship("Proyecto", remote_side=[id])
</file>

<file path="backend/app/models/usuario.py">
from sqlalchemy import Column, Integer, String
from sqlalchemy.orm import relationship
from app.database import Base

class Usuario(Base):
    __tablename__ = "usuario"

    id = Column(Integer, primary_key=True, index=True)
    firebase_uid = Column(String, unique=True, nullable=False)
    nombre_usuario = Column(String, nullable=False)
    rol = Column(String, nullable=False)  # 'admin' o 'editor'

    proyectos_creados = relationship(
        "Proyecto",
        foreign_keys="[Proyecto.creado_por_id]",
        back_populates="creado_por"
    )

    proyectos_aprobados = relationship(
        "Proyecto",
        foreign_keys="[Proyecto.aprobado_por_id]",
        back_populates="aprobado_por"
    )
</file>

<file path="backend/app/routes/comuna.py">
from fastapi import APIRouter, Depends
from sqlalchemy.orm import Session
from app.database import get_db
from app.models.comuna import Comuna
from app.schemas.comuna import ComunaOut

router = APIRouter()

@router.get("/comunas", response_model=list[ComunaOut])
def listar_comunas(db: Session = Depends(get_db)):
    return db.query(Comuna).all()
</file>

<file path="backend/app/routes/fuente_financiamiento.py">
from fastapi import APIRouter, Depends
from sqlalchemy.orm import Session
from app.database import get_db
from app.models.fuente_financiamiento import FuenteFinanciamiento
from app.schemas.fuente_financiamiento import FuenteFinanciamientoOut

router = APIRouter(prefix="/fuente-financiamiento", tags=["Fuentes de Financiamiento"])

@router.get("/", response_model=list[FuenteFinanciamientoOut])
def listar_fuentes(db: Session = Depends(get_db)):
    return db.query(FuenteFinanciamiento).all()
</file>

<file path="backend/app/routes/log_cambios.py">
# backend/app/routes/log_cambios.py

from fastapi import APIRouter, Depends
from sqlalchemy.orm import Session, selectinload
from app.database import get_db
from app.models.log_cambios import LogCambios
from app.schemas.log_cambios import LogCambioOut

router = APIRouter(prefix="/log_cambios", tags=["Log de Cambios"])

@router.get("/", response_model=list[LogCambioOut])
def obtener_log_cambios(db: Session = Depends(get_db)):
    logs = db.query(LogCambios).options(
        selectinload(LogCambios.usuario),
        selectinload(LogCambios.proyecto)
    ).order_by(LogCambios.fecha.desc()).all()

    resultado = []
    for log in logs:
        resultado.append({
            "id": log.id,
            "fecha": log.fecha,
            "proyecto_id": log.proyecto_id,
            "nombre_proyecto": log.proyecto.nombre if log.proyecto else None,
            "usuario_id": log.usuario_id,
            "nombre_usuario": log.usuario.nombre_usuario if log.usuario else None,
            "accion": log.accion,
            "campo_modificado": log.campo_modificado,
            "valor_anterior": log.valor_anterior,
            "valor_nuevo": log.valor_nuevo,
        })

    return resultado
</file>

<file path="backend/app/schemas/categoria.py">
from pydantic import BaseModel

# ‚úÖ Esquema de salida p√∫blico o embebido (como en ProyectoPublicoOut)
class CategoriaOut(BaseModel):
    id: int
    nombre: str

    model_config = {
        "from_attributes": True
    }

# ‚úÖ Esquema general para admin, si se usa en GET /categorias o similares
class CategoriaResponse(BaseModel):
    id: int
    nombre: str

    model_config = {
        "from_attributes": True
    }
</file>

<file path="backend/app/schemas/ciclovia.py">
from pydantic import BaseModel
from typing import Optional
from app.schemas.comuna import ComunaOut
from app.schemas.estado_avance import EstadoAvanceOut
from app.schemas.tipo_ciclovia import TipoCicloviaOut

class CicloviaOut(BaseModel):
    id: int
    nombre: str
    longitud_metros: float
    ancho: Optional[float]
    comuna: ComunaOut
    tipo_ciclovia: TipoCicloviaOut
    estado_avance: EstadoAvanceOut
    geometria: Optional[dict]

    class Config:
        orm_mode = True
</file>

<file path="backend/app/schemas/comuna.py">
from pydantic import BaseModel

class ComunaOut(BaseModel):
    id: int
    nombre: str
    provincia_id: int

    model_config = {
        "from_attributes": True
    }
</file>

<file path="backend/app/schemas/log_cambios.py">
# backend/app/schemas/log_cambios.py

from pydantic import BaseModel
from typing import Optional, Any
from datetime import datetime

class LogCambioOut(BaseModel):
    id: int
    fecha: datetime
    proyecto_id: Optional[int]
    nombre_proyecto: Optional[str]
    usuario_id: Optional[int]
    nombre_usuario: Optional[str]
    accion: str
    campo_modificado: Optional[str]
    valor_anterior: Optional[Any]
    valor_nuevo: Optional[Any]

    model_config = {
        "from_attributes": True
    }
</file>

<file path="backend/app/schemas/tipo_pavimento.py">
from pydantic import BaseModel

class TipoPavimentoOut(BaseModel):
    id: int
    nombre: str

    class Config:
        orm_mode = True
</file>

<file path="backend/app/utils/geo.py">
# app/utils/geo.py

from shapely import wkb
from shapely.geometry import shape, mapping
from pyproj import Transformer
from fastapi import HTTPException
from geoalchemy2.shape import from_shape
import json

# üó∫Ô∏è Definimos el transformer para convertir UTM a WGS84 (si alguna vez lo necesitas)
transformer = Transformer.from_crs("EPSG:32718", "EPSG:4326", always_xy=True)

def convertir_wkb_a_geojson(wkb_element):
    """
    Convierte una geometr√≠a WKB de PostGIS a un objeto GeoJSON (dict con 'type' y 'coordinates').
    """
    if not wkb_element:
        return None
    shape_obj = wkb.loads(bytes(wkb_element.data))
    return mapping(shape_obj)


def convertir_utm_a_wgs84(utm_coords):
    """
    Convierte una lista de coordenadas UTM (EPSG:32718) a WGS84 (EPSG:4326).
    """
    if not utm_coords:
        return []
    return [list(transformer.transform(x, y)) for x, y in utm_coords]


def validar_y_convertir_geojson(geometria_raw, tipo_esperado="Polygon"):
    """
    Valida un objeto GeoJSON (dict o string) y lo convierte en una geometr√≠a PostGIS v√°lida.
    
    Par√°metros:
        - geometria_raw: dict o str en formato GeoJSON
        - tipo_esperado: "Polygon", "LineString", etc. (por defecto Polygon)

    Retorna:
        - Objeto Geometry compatible con GeoAlchemy2
    """
    try:
        geojson = json.loads(geometria_raw) if isinstance(geometria_raw, str) else geometria_raw

        if not geojson.get("type") or not geojson.get("coordinates"):
            raise HTTPException(status_code=400, detail="‚ùå Geometr√≠a inv√°lida: faltan campos obligatorios.")

        if tipo_esperado and geojson["type"].lower() != tipo_esperado.lower():
            raise HTTPException(
                status_code=400,
                detail=f"‚ùå Tipo de geometr√≠a inv√°lido. Se esperaba '{tipo_esperado}', se recibi√≥ '{geojson['type']}'.")

        return from_shape(shape(geojson), srid=4326)

    except Exception as e:
        raise HTTPException(status_code=400, detail=f"‚ùå Error al procesar geometr√≠a: {str(e)}")
</file>

<file path="frontend/public/index.html">
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined" rel="stylesheet" />

    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>VisorGeo MinvuBiob√≠o</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>
</file>

<file path="frontend/src/components/admin/DashboardResumen.js">
import React, { useEffect, useState } from "react";
import api from "../../services/api";
import Icono from "../../components/Icono"; 
import "../../css/admin.css";

const DashboardResumen = () => {
  const [resumen, setResumen] = useState({
    proyectos_activos: 0,
    pavimentos: 0,
    ciclovias: 0,
    parques: 0
  });

  useEffect(() => {
    api.get("/proyectos/publicos/totales")
      .then((res) => setResumen(res.data))
      .catch((err) => console.error("‚ùå Error al cargar resumen", err));
  }, []);

  return (
    <div className="encabezado-admin">

      <div className="card border-blue">
        <Icono nombre="directions" size={32} color="#007bff" />
        <p>Pavimentos y vias locales</p>
        <h2>{resumen.pavimentos}</h2>
      </div>
      <div className="card border-orange">
        <Icono nombre="pedal_bike" size={32} color="#fd7e14" />
        <p>Ciclov√≠as</p>
        <h2>{resumen.ciclovias}</h2>
      </div>
      <div className="card border-purple">
        <Icono nombre="park" size={32} color="#6f42c1" />
        <p>Parques Urbanos</p>
        <h2>{resumen.parques}</h2>
      </div>
      <div className="card border-green">
        <Icono nombre="assignment_turned_in" size={32} color="#28a745" />
        <p>Proyectos activos</p>
        <h2>{resumen.proyectos_activos}</h2>
      </div>
      
    </div>
  );
};

export default DashboardResumen;
</file>

<file path="frontend/src/components/admin/GestionPavimentos.js">
// src/components/admin/GestionPavimentos.jsx
import React, { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import axios from "../../services/api";
import { useUser } from "../../context/UserContext";
import AdminLayout from "../../layout/AdminLayout";
import Icono from "../Icono";
import "../../css/listas.css";

const GestionPavimentos = () => {
  const [pavimentos, setPavimentos] = useState([]);
  const [colapsado, setColapsado] = useState(false);
  const { perfil } = useUser();
  const navigate = useNavigate();

  useEffect(() => {
    axios.get("/pavimentos/")
      .then(res => setPavimentos(res.data))
      .catch(err => console.error("‚ùå Error al cargar pavimentos:", err));
  }, []);

  const handleEditar = (id) => {
    navigate(`/admin/editar-pavimento/${id}`);
  };

  const handleEliminar = async (id) => {
    if (!window.confirm("¬øEliminar este pavimento?")) return;
    try {
      await axios.delete(`/pavimentos/${id}`);
      setPavimentos(prev => prev.filter(p => p.id !== id));
    } catch (err) {
      console.error("‚ùå Error al eliminar:", err);
    }
  };

  const renderEstado = (estado) => {
    const nombre = estado?.toLowerCase();
    const icon = nombre === "terminada" ? "check_circle" : nombre === "en ejecuci√≥n" ? "schedule" : "pending";
    const clase = nombre === "terminada" ? "estado aprobado" : nombre === "en ejecuci√≥n" ? "estado pendiente" : "estado rechazado";

    return (
      <span className={clase}>
        <Icono nombre={icon} size={18} />
        {estado || "Sin estado"}
      </span>
    );
  };

  return (
    <AdminLayout>
      <div className="lista">
        <div className="titulo-colapsable" onClick={() => setColapsado(!colapsado)}>
          <h2 className="font-level-2 text-primary">
            <span className="material-symbols-outlined">construction</span> Pavimentos y V√≠as Locales
          </h2>
          <button className="btn-toggle"><Icono nombre={colapsado ? "expand_more" : "expand_less"} /></button>
        </div>

        {!colapsado && (
          <div className="tabla-scroll fade-in">
            <table className="tabla-lista">
              <thead>
                <tr>
                  <th></th>
                  <th>Sector</th>
                  <th>Comuna</th>
                  <th>Estado</th>
                  {perfil?.rol !== "visitante" && <th className="acciones-columna">Acciones</th>}
                </tr>
              </thead>
              <tbody>
                {pavimentos.length > 0 ? (
                  pavimentos.map((p) => (
                    <tr key={p.id}>
                      <td><input type="checkbox" /></td>
                      <td>{p.sector}</td>
                      <td>{p.comuna?.nombre || "Sin comuna"}</td>
                      <td>{renderEstado(p.estado_avance?.nombre)}</td>
                      {perfil?.rol !== "visitante" && (
                        <td>
                     <div className="btn-acciones">
  <button
    className={`btn-icono ${!p.editable ? "btn-disabled" : ""}`}
    onClick={() => p.editable && handleEditar(p.id)}
    disabled={!p.editable}
    title={p.editable ? "Editar pavimento" : "Solo editable por su creador o un administrador"}
  >
    <span className="material-symbols-outlined">edit</span>
  </button>

  {perfil.rol === "admin" && (
    <button
      className="btn-icono btn-eliminar"
      onClick={() => handleEliminar(p.id)}
      title="Eliminar pavimento"
    >
      <span className="material-symbols-outlined">delete</span>
    </button>
  )}
</div>
                        </td>
                      )}
                    </tr>
                  ))
                ) : (
                  <tr><td colSpan="5">No hay pavimentos registrados.</td></tr>
                )}
              </tbody>
            </table>
          </div>
        )}
      </div>
    </AdminLayout>
  );
};

export default GestionPavimentos;
</file>

<file path="frontend/src/components/admin/GestionProyectos.js">
import React, { useEffect, useState } from "react";
import axios from "../../services/api";
import { useUser } from "../../context/UserContext";
import { useNavigate } from "react-router-dom";
import AdminLayout from "../../layout/AdminLayout";
import Icono from "../Icono";
import "../../css/listas.css";

const GestionProyectos = () => {
  const [proyectos, setProyectos] = useState([]);
  const [colapsado, setColapsado] = useState(false);
  const { perfil } = useUser();
  const navigate = useNavigate();

  useEffect(() => {
    axios.get("/proyectos/aprobados")
      .then(res => setProyectos(res.data))
      .catch(err => console.error("‚ùå Error al cargar proyectos:", err));
  }, []);

  const handleEditar = (id) => {
    navigate(`/admin/editar-proyecto/${id}`);
  };

  const handleEliminar = async (id) => {
    if (!window.confirm("¬øEliminar este proyecto?")) return;
    try {
      await axios.delete(`/proyectos/${id}`);
      setProyectos(prev => prev.filter(p => p.id !== id));
    } catch (err) {
      console.error("‚ùå Error al eliminar:", err);
    }
  };

  const renderEstado = (estado) => {
    const icon = estado === "aprobado" ? "check_circle" : estado === "pendiente" ? "schedule" : "cancel";
    const clase = estado === "aprobado"
      ? "estado aprobado"
      : estado === "pendiente"
      ? "estado pendiente"
      : "estado rechazado";

    return (
      <span className={clase}>
        <Icono nombre={icon} size={18} />
        {estado.charAt(0).toUpperCase() + estado.slice(1)}
      </span>
    );
  };

  return (
    <AdminLayout>
      <div className="lista">
        <div className="titulo-colapsable" onClick={() => setColapsado(!colapsado)}>
          <h2 className="font-level-2 text-primary">
            <span className="material-symbols-outlined">folder</span> Gesti√≥n de proyectos
          </h2>
          <button className="btn-toggle" title="Colapsar/Expandir">
            <Icono nombre={colapsado ? "expand_more" : "expand_less"} />
          </button>
        </div>

        {!colapsado && (
          <div className="tabla-scroll fade-in">
            <table className="tabla-lista">
              <thead>
                <tr>
                  <th><Icono nombre="check_box_outline_blank" /></th>
                  <th>Nombre</th>
                  <th>Estado</th>
                  {perfil?.rol !== "visitante" && <th className="acciones-columna">Acciones</th>}
                </tr>
              </thead>
              <tbody>
                {proyectos.length > 0 ? (
                  proyectos.map((p) => (
                    <tr key={p.id}>
                      <td><input type="checkbox" /></td>
                      <td>{p.nombre}</td>
                      <td>{renderEstado(p.estado_proyecto)}</td>
                      {perfil?.rol !== "visitante" && (
                        <td>
                          <div className="btn-acciones">
                            <button className="btn-icono" onClick={() => handleEditar(p.id)}>
                              <span className="material-symbols-outlined">edit</span>
                            </button>
                            {perfil.rol === "admin" && (
                              <button className="btn-icono btn-eliminar" onClick={() => handleEliminar(p.id)}>
                                <span className="material-symbols-outlined">delete</span>
                              </button>
                            )}
                          </div>
                        </td>
                      )}
                    </tr>
                  ))
                ) : (
                  <tr>
                    <td colSpan={perfil?.rol !== "visitante" ? 4 : 3}>
                      No hay proyectos registrados.
                    </td>
                  </tr>
                )}
              </tbody>
            </table>
          </div>
        )}
      </div>
    </AdminLayout>
  );
};

export default GestionProyectos;
</file>

<file path="frontend/src/components/EditarPavimento.js">
// src/components/EditarPavimento.jsx
import { useParams, useNavigate } from "react-router-dom";
import AdminLayout from "../layout/AdminLayout";
import FormularioPavimento from "./FormularioPavimento";
console.log("üß™ Se carg√≥ EditarPavimento.jsx");

const EditarPavimento = () => {
  const { id } = useParams();
  const navigate = useNavigate();

  const handleSuccess = () => {
    navigate("/admin");
  };

  return (
    <AdminLayout> 
       <FormularioPavimento pavimentoId={id} modoEdicion={true} onSuccess={handleSuccess} />

    </AdminLayout>
  
  );
};

export default EditarPavimento;
</file>

<file path="frontend/src/components/FiltroModal.js">
// ‚úÖ FiltroModal.js
import "../css/filtroModal.css";

function FiltroModal({ visible, categorias = [], comuna, onRemoveCategoria, onRemoveComuna, onClearAll, onClose }) {
  if (!visible) return null;

  return (
    <div className="modal-overlay">
      <div className="modal-content">
        <div className="modal-header">
          <span>{(categorias.length > 0 || comuna) ? 'Filtros activos' : 'Sin filtros'}</span>
          <button onClick={onClearAll} className="link-clear">BORRAR TODO</button>
        </div>

        <div className="modal-body">
          {categorias.length > 0 && categorias.map((cat, i) => (
            <div key={i} className="filtro-item">
              <span>{cat.label}</span>
              <button onClick={() => onRemoveCategoria(cat)}>&times;</button>
            </div>
          ))}

          {comuna && (
            <div className="filtro-item">
              <span>{comuna.label}</span>
              <button onClick={onRemoveComuna}>&times;</button>
            </div>
          )}
        </div>

        <div className="modal-footer">
          <button className="btn-cancelar" onClick={onClose}>CANCELAR</button>
          <button className="btn-aceptar" onClick={onClose}>ACEPTAR</button>
        </div>
      </div>
    </div>
  );
}

export default FiltroModal;
</file>

<file path="frontend/src/components/FormularioCiclovia.js">
import { useState } from 'react';
import api from '../services/api';
import '../css/formularios.css';

function FormularioCiclovia({ proyectoId, comunaId }) {
  const [form, setForm] = useState({
    nombre_tramo: '',
    estado_avance_id: '',
    tipo_ciclovia_id: '',
    longitud_km: '',
    geometria: ''
  });

  const [mensaje, setMensaje] = useState('');

  const handleChange = (e) => {
    const { name, value } = e.target;
    setForm(prev => ({ ...prev, [name]: value }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    const payload = {
      ...form,
      proyecto_id: proyectoId,
      comuna_id: comunaId,
      longitud_km: parseFloat(form.longitud_km)
    };
    try {
      await api.post('/ciclovias', payload);
      setMensaje('‚úÖ Ciclov√≠a creada con √©xito');
      setForm({
        nombre_tramo: '',
        estado_avance_id: '',
        tipo_ciclovia_id: '',
        longitud_km: '',
        geometria: ''
      });
    } catch {
      setMensaje('‚ùå Error al crear ciclov√≠a');
    }
  };

  return (
    <div className="formulario-categoria">
      <h4>‚ûï A√±adir Ciclov√≠a</h4>
      <form onSubmit={handleSubmit}>
        <label>Nombre del tramo:</label><br />
        <input name="nombre_tramo" value={form.nombre_tramo} onChange={handleChange} required /><br />

        <label>Estado de avance ID:</label><br />
        <input name="estado_avance_id" value={form.estado_avance_id} onChange={handleChange} required /><br />

        <label>Tipo de ciclov√≠a ID:</label><br />
        <input name="tipo_ciclovia_id" value={form.tipo_ciclovia_id} onChange={handleChange} required /><br />

        <label>Longitud (km):</label><br />
        <input name="longitud_km" value={form.longitud_km} onChange={handleChange} required /><br />

        <label>Geometr√≠a (GeoJSON):</label><br />
        <textarea name="geometria" value={form.geometria} onChange={handleChange} required /><br />

        <button type="submit">Guardar Ciclov√≠a</button>
      </form>
      {mensaje && <p>{mensaje}</p>}
    </div>
  );
}

export default FormularioCiclovia;
</file>

<file path="frontend/src/components/Sidebar.js">
import { useState } from "react";
import Select from "react-select";
import Icono from "../components/Icono";
import api from "../services/api";
import "../css/sidebarvisor.css";

function Sidebar({ categorias, comunas, onResultados, onToggleMinimizada }) {
  const [minimizada, setMinimizada] = useState(false);
  const [selectedCategorias, setSelectedCategorias] = useState([]);
  const [selectedComuna, setSelectedComuna] = useState(null);
  const [mensaje, setMensaje] = useState("");
  const [isLoading, setIsLoading] = useState(false);

  const customStyles = {
    control: (base) => ({
      ...base,
      borderColor: "#0055A5",
      boxShadow: "none",
      "&:hover": { borderColor: "#003366" },
    }),
    menu: (base) => ({
      ...base,
      zIndex: 9999,
    }),
  };

  const handleBuscar = async () => {
    const categoriaIds = selectedCategorias.map((cat) => cat.value);
    const comunaId = selectedComuna?.value;

    setIsLoading(true);
    setMensaje("");

    try {
      const params = new URLSearchParams();
      if (categoriaIds.length > 0) {
        categoriaIds.forEach((id) => params.append("categorias", id));
      }
      if (comunaId) params.append("comuna", comunaId);

      const res = await api.get(`/proyectos/publicos?${params.toString()}`);
      const resultados = res.data;

      if (resultados.length === 0) {
        setMensaje("‚ö†Ô∏è No se encontraron proyectos con los filtros aplicados.");
      } else {
        setMensaje("");
      }

      onResultados(resultados);
    } catch (error) {
      setMensaje("‚ùå Error al cargar los proyectos.");
    } finally {
      setIsLoading(false);
    }
  };

  const handleLimpiarFiltros = () => {
    setSelectedCategorias([]);
    setSelectedComuna(null);
    setMensaje("");
    onResultados([]);
  };

  const toggleSidebar = () => {
    const nuevoEstado = !minimizada;
    setMinimizada(nuevoEstado);
    if (onToggleMinimizada) {
      onToggleMinimizada(nuevoEstado); // üîî Notifica a Home.jsx
    }
  };

  return (
    <div className={`sidebar ${minimizada ? "minimizada" : ""}`}>
      <button
        className="toggle-sidebar-visor"
        onClick={toggleSidebar}
        title={minimizada ? "Abrir men√∫" : "Minimizar men√∫"}
      >
        <Icono nombre={minimizada ? "chevron_right" : "chevron_left"} />
      </button>

      {!minimizada && (
        <>
          <div className="sidebar-logo">
            <img
              src="/imagenes/logo.png"
              alt="Logo VisorGeo Minvu Biob√≠o"
              className="logo-sidebar"
            />
          </div>

          <div className="buscador-wrapper">
            <div className="input-icon-container-sidebar">
              <Icono nombre="search" size={20} color="#8A8A8A" />
              <input
                type="text"
                className="input-busqueda-sidebar"
                placeholder="Buscar..."
              />
            </div>
          </div>

          <div className="sidebar-contenido">
            <h4 className="font-level-5">Filtrar proyectos</h4>

            <label className="text-gray-a"><strong>Categor√≠a</strong></label>
            <Select
              isMulti
              options={categorias}
              value={selectedCategorias}
              onChange={setSelectedCategorias}
              styles={customStyles}
              placeholder="Seleccionar..."
            />

            <label className="text-gray-a"><strong>Comuna</strong></label>
            <Select
              options={comunas}
              value={selectedComuna}
              onChange={setSelectedComuna}
              styles={customStyles}
              placeholder="Seleccionar..."
            />

            <button
              className="btn-buscar w-100"
              onClick={handleBuscar}
              disabled={isLoading}
            >
              {isLoading ? "Cargando..." : "Buscar proyectos"}
            </button>

            <button className="btn-limpiar w-100" onClick={handleLimpiarFiltros}>
              Limpiar filtros
            </button>

            {mensaje && (
              <div className="mensaje-info">
                <Icono nombre={isLoading ? "progress_activity" : "info"} />
                {mensaje}
              </div>
            )}
          </div>
        </>
      )}
    </div>
  );
}

export default Sidebar;
</file>

<file path="frontend/src/components/SideBarAdmin.js">
import { NavLink, useNavigate } from "react-router-dom";
import { signOut } from "firebase/auth";
import { auth } from "../services/firebase";
import { useUser } from "../context/UserContext";
import { useState, useEffect } from "react";
import "../css/admin.css";

const SideBarAdmin = () => {
  const { perfil, loading } = useUser();
  const navigate = useNavigate();
  const [isMobile, setIsMobile] = useState(false);
  const [open, setOpen] = useState(true);

  // Detectar tama√±o de pantalla
  useEffect(() => {
    const handleResize = () => {
      const mobile = window.innerWidth <= 768;
      setIsMobile(mobile);
      setOpen(!mobile); // abierto por defecto en escritorio, cerrado en m√≥vil
    };
    handleResize(); // inicial
    window.addEventListener("resize", handleResize);
    return () => window.removeEventListener("resize", handleResize);
  }, []);

  if (loading) return null;

  const handleLogout = async () => {
    try {
      await signOut(auth);
      navigate("/login");
    } catch (error) {
      console.error("Error al cerrar sesi√≥n:", error);
    }
  };

  return (
    <>
      {isMobile && (
        <button
          className="toggle-sidebar"
          onClick={() => setOpen(!open)}
          aria-label="Abrir men√∫"
        >
          <span className="material-symbols-outlined">menu</span>
        </button>
      )}

      <aside className={`sidebar-admin ${open ? "open" : "collapsed"}`}>
        <div className="sidebar-header">
          <h2>VisorGeo<br /><span className="sub-logo">Minvu Biob√≠o</span></h2>
        </div>

        <nav className="sidebar-nav">
  <NavLink to="/admin" className="link">
    <span className="material-symbols-outlined">dashboard</span>
    Panel
  </NavLink>

  <NavLink to="/admin/crear-proyecto" className="link">
    <span className="material-symbols-outlined">add_circle</span>
    Crear proyecto
  </NavLink>

  <NavLink to="/admin/gestion-proyectos" className="link">
    <span className="material-symbols-outlined">folder</span>
    Gesti√≥n de proyectos
  </NavLink>

  <NavLink to="/admin/gestion-pavimentos" className="link">
    <span className="material-symbols-outlined">construction</span>
    Pavimentos y v√≠as locales
  </NavLink>

  <NavLink to="/admin/gestion-parques" className="link">
    <span className="material-symbols-outlined">park</span>
    Parques urbanos
  </NavLink>

  {perfil?.rol === "admin" && (
    <NavLink to="/admin/log-cambios" className="link">
      <span className="material-symbols-outlined">history</span>
      Cambios
    </NavLink>
  )}
</nav>


        <footer>
  <div className="usuario">
    <span className="material-symbols-outlined" style={{ fontSize: "40px", color: "#555" }}>
      account_circle
    </span>
    <div>
      <strong>{perfil?.nombre_usuario}</strong><br />
      <small>{perfil?.rol}</small>
    </div>
  </div>
  <button className="btn-cerrar-sesion" onClick={handleLogout}>
    <span className="material-symbols-outlined">logout</span>
    Cerrar sesi√≥n
  </button>
</footer>

      </aside>
    </>
  );
};

export default SideBarAdmin;
</file>

<file path="frontend/src/components/ZoomControl.js">
// src/components/ZoomControl.jsx
import { useEffect } from "react";
import { useMap } from "react-leaflet";
import L from "leaflet";
import "../css/map-controls.css";


const ZoomControl = ({ position = "topright" }) => {
  const map = useMap();

  useEffect(() => {
    const container = L.DomUtil.create("div", "leaflet-bar leaflet-control zoom-control-custom");

    const zoomInButton = L.DomUtil.create("a", "zoom-in", container);
    zoomInButton.innerHTML = "+";
    zoomInButton.title = "Acercar";
    Object.assign(zoomInButton.style, {
      color: "var(--gray-a)",
      backgroundColor: "var(--white)",
      fontSize: "20px",
      fontWeight: "bold",
      padding: "6px",
      userSelect: "none",
      textAlign: "center",
    });

    const zoomOutButton = L.DomUtil.create("a", "zoom-out", container);
    zoomOutButton.innerHTML = "‚àí";
    zoomOutButton.title = "Alejar";
    Object.assign(zoomOutButton.style, {
      color: "var(--gray-a)",
      backgroundColor: "var(--white)",
      fontSize: "20px",
      fontWeight: "bold",
      padding: "6px",
      userSelect: "none",
      textAlign: "center",
    });

    const CustomZoom = L.Control.extend({
      onAdd: () => container,
      onRemove: () => {}
    });

    const control = new CustomZoom({ position });
    control.addTo(map);

    zoomInButton.onclick = () => map.zoomIn();
    zoomOutButton.onclick = () => map.zoomOut();

    return () => {
      map.removeControl(control);
    };
  }, [map, position]);

  return null;
};

export default ZoomControl;
</file>

<file path="frontend/src/context/UserContext.js">
import { createContext, useContext, useState, useEffect } from "react";
import { getAuth, onAuthStateChanged } from "firebase/auth";
import api from "../services/api"; // Tu axios con interceptor

const UserContext = createContext();

export const UserProvider = ({ children }) => {
  const [firebaseUser, setFirebaseUser] = useState(null);
  const [perfil, setPerfil] = useState(null);
  const [loading, setLoading] = useState(true); // üî• Muy importante

  useEffect(() => {
    const auth = getAuth();
    const unsubscribe = onAuthStateChanged(auth, async (user) => {
      setFirebaseUser(user);

      if (user) {
        try {
          const res = await api.get("me"); // ‚úÖ Token lo agrega el interceptor
          setPerfil(res.data);
        } catch (error) {
          console.error("‚ùå Error al obtener perfil:", error);
          setPerfil(null);
        }
      } else {
        setPerfil(null);
      }

      setLoading(false);
    });

    return () => unsubscribe();
  }, []);

  return (
    <UserContext.Provider value={{ firebaseUser, perfil, loading }}>
      {children}
    </UserContext.Provider>
  );
};

export const useUser = () => useContext(UserContext);
</file>

<file path="frontend/src/css/admin.css">
@import './styles.css';

/* Layout general */
.admin-panel {
  display: flex;
  min-height: 100vh;
  background-color: var(--white);
  font-family: var(--font-base);
}

/* Contenido principal */
.admin-panel-content {
  margin-left: 250px;
  padding: 2rem;
  min-height: 100vh;
  background-color: var(--neutral); /* Antes: #fafafa */
  transition: margin-left 0.3s ease;
}

/* Encabezado de m√©tricas */
.encabezado-admin {
  margin: 0 30px;
  display: flex;
  justify-content: space-between;
  align-items: stretch;
  flex-wrap: wrap;
  gap: 20px;
}

/* Tarjetas resumen */
.card {
  background-color: var(--white);
  padding: 20px;
  border-radius: 10px;
  border-left: 5px solid var(--primary);
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.06);
  min-width: 200px;
  flex: 1;
}

.card p {
  margin: 0;
  font-size: 0.95rem;
  color: var(--gray-b);
}

.card h2 {
  margin-top: 8px;
  font-size: 2rem;
  color: var(--primary);
}

/* Bot√≥n a√±adir */
.boton-add {
  display: flex;
  align-items: center;
  justify-content: flex-end;
  flex: 1;
  min-width: 200px;
}

.btn {
  background-color: var(--primary);
  color: var(--white);
  padding: 10px 18px;
  border: none;
  border-radius: 6px;
  font-weight: 600;
  cursor: pointer;
  transition: background-color 0.2s ease-in-out;
}

.btn:hover {
  background-color: var(--primary-dark);
}

/* Sidebar admin */
.sidebar-admin {
  position: fixed;
  top: 0;
  left: 0;
  width: 250px;
  height: 100vh;
  background-color: var(--neutral); /* Antes: #f7f7f7 */
  border-right: 1px solid var(--accent);
  padding: 1rem;
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  z-index: 1000;
  transition: transform 0.3s ease;
}

.sidebar-admin.collapsed {
  transform: translateX(-100%);
}

.sidebar-admin.open {
  transform: translateX(0);
}

.sidebar-admin h2 {
  margin-bottom: 1rem;
  font-size: 1.4rem;
  color: var(--primary);
}

.sidebar-admin nav {
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
}

.sidebar-admin .link {
  text-decoration: none;
  color: var(--gray-a);
  font-weight: 500;
  display: flex;
  align-items: center;
  gap: 0.5rem;
  padding: 10px;
  border-radius: 6px;
  transition: background-color 0.2s;
}

.sidebar-admin .link:hover,
.sidebar-admin .link.active {
  background-color: var(--accent);       /* Antes: #e0e0e0 */
  color: var(--primary-dark);           /* Antes: #0055a5 */
}

.sidebar-admin footer {
  margin-top: auto;
}

.sidebar-admin .usuario {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  margin-bottom: 1rem;
  padding-top: 1rem;
  border-top: 1px solid var(--accent);
}

.sidebar-admin .usuario img {
  width: 40px;
  height: 40px;
  border-radius: 50%;
  object-fit: cover;
}

.sidebar-admin .btn-cerrar-sesion {
  background-color: var(--secondary);   /* Antes: #cc0000 */
  color: var(--white);
  border: none;
  padding: 0.4rem 0.6rem;
  width: 100%;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 0.4rem;
  border-radius: 4px;
}

/* Bot√≥n hamburguesa m√≥vil */
.toggle-sidebar {
  display: none;
  position: fixed;
  top: 1rem;
  left: 1rem;
  z-index: 1100;
  background-color: var(--primary-dark); /* Antes: #0055a5 */
  color: var(--white);
  border: none;
  padding: 0.5rem 0.6rem;
  border-radius: 4px;
  box-shadow: 0 0 5px rgba(0, 0, 0, 0.2);
}

/* Responsive */
@media (max-width: 768px) {
  .toggle-sidebar {
    display: block;
  }

  .admin-panel-content {
    margin-left: 0 !important;
  }

  .encabezado-admin {
    flex-direction: column;
    align-items: stretch;
  }

  .boton-add {
    justify-content: center;
  }
}

.alerta {
  padding: 1rem;
  border-radius: 4px;
  font-weight: bold;
  margin-top: 1rem;
}

.alerta-exito {
  background-color: #e6ffea;
  color: #006600;
  border: 1px solid #00aa00;
}

.alerta-advertencia {
  background-color: #fffbe6;
  color: #997a00;
  border: 1px solid #e6b800;
}

.alerta-error {
  background-color: #ffe6e6;
  color: #990000;
  border: 1px solid #cc0000;
}
</file>

<file path="frontend/src/css/formularios.css">
/* formularios.css - estilos generales para todos los formularios del sistema */

.formulario-container {
  max-width: 860px;
  margin: 2rem auto;
  padding: 2rem;
  background-color: #F5F5F5;
  border: 1px solid #CCCCCC;
  border-radius: 8px;
  font-family: "Roboto", sans-serif;
  color: #1E1E1E;
}

.formulario-container h4 {
  font-size: 1.5rem;
  margin-bottom: 1.2rem;
  color: #0055A5;
}

.formulario-container label {
  display: block;
  margin-top: 1rem;
  margin-bottom: 0.3rem;
  font-weight: 500;
  color: #1E1E1E;
}

select {
  height: auto;
}

.formulario-container select,
.formulario-container input,
.formulario-container textarea {
  width: 100%;
  padding: 0.55rem;
  border: 1px solid #CCCCCC;
  border-radius: 4px;
  background-color: #ffffff;
  font-size: 0.95rem;
  box-sizing: border-box;
}

.formulario-container textarea {
  resize: vertical;
  min-height: 60px;
}

.formulario-container button {
  margin-top: 1.5rem;
  padding: 0.6rem 1.5rem;
  background-color: #0055A5;
  color: white;
  font-weight: bold;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  transition: background 0.2s ease;
}

.formulario-container button:disabled {
  background-color: #999999;
  cursor: not-allowed;
}

.formulario-container button:hover:not(:disabled) {
  background-color: #004080;
}

.mensaje {
  margin-top: 1rem;
  font-weight: bold;
  color: #D2121A;
}

.map-wrapper {
  height: 400px;
  margin-top: 2rem;
  border-radius: 8px;
  overflow: hidden;
  border: 1px solid #CCCCCC;
}
</file>

<file path="frontend/src/css/home.css">
/* === Contenedor principal === */
.visor-container {
  display: flex;
  flex-direction: row;
  height: 100vh;
  width: 100%;
  font-family: var(--font-base);
  background-color: var(--neutral);
}

/* === Mapa === */
.mapa,
.map-wrapper {
  flex-grow: 1;
  height: 100vh;
  width: 100%;
  position: relative;
}

/* === Control de zoom personalizado === */
.zoom-control-custom {
  display: flex;
  flex-direction: column;
  background: var(--white);
  border-radius: 4px;
  overflow: hidden;
}

.zoom-control-custom a {
  text-align: center;
  text-decoration: none;
  color: var(--black);
  font-size: 20px;
  padding: 7px;
  cursor: pointer;
  user-select: none;
}

.zoom-control-custom a:hover {
  background-color: var(--neutral);
}

/* === Barra superior derecha === */
.topbar.right {
  position: absolute;
  top: 10px;
  right: 10px;
  display: flex;
  gap: 10px;
  z-index: 500;
}

/* === Bot√≥n √°rea admin === */
.btn-admin {
  background-color: var(--gray-a);
  color: var(--white);
  padding: 8px 14px;
  border: none;
  border-radius: 6px;
  font-size: 14px;
  cursor: pointer;
}

.btn-admin:hover {
  background-color: var(--black);
}

/* === Bot√≥n para resetear mapa === */
.btn-reset-map {
  position: absolute;
  bottom: 20px;
  left: 20px;
  background-color: var(--white);
  border: 1px solid var(--accent);
  border-radius: 8px;
  padding: 8px;
  font-size: 18px;
  cursor: pointer;
  z-index: 1000;
}

/* === Estado b√∫squeda (texto inferior) === */
.estado-busqueda {
  position: absolute;
  bottom: 10px;
  left: 10px;
  background: var(--white);
  padding: 6px 12px;
  border-radius: 6px;
  font-size: 14px;
  color: var(--gray-a);
}

/* === Toasts === */
.toast-mensaje {
  display: flex;
  align-items: center;
  gap: 10px;
  position: absolute;
  bottom: 30px;
  right: 10px;
  background-color: var(--white);
  border: 1px solid var(--accent);
  padding: 10px 14px;
  border-radius: 8px;
  font-size: 14px;
  color: var(--gray-a);
  z-index: 999;
}

.toast-mensaje button {
  margin-left: auto;
  background: none;
  border: none;
  font-size: 18px;
  color: var(--gray-b);
  cursor: pointer;
}

.toast-mensaje.success .icon-toast { color: var(--green); }
.toast-mensaje.info .icon-toast    { color: var(--primary); }
.toast-mensaje.error .icon-toast   { color: var(--secondary); }

.popup-proyecto h3 {
  margin: 0;
  font-size: 1rem;
  font-family: var(--font-heading);
  color: var(--primary-dark);
}

.popup-proyecto p {
  margin: 4px 0;
  font-size: 0.85rem;
  font-family: var(--font-base);
}
</file>

<file path="frontend/src/css/listas.css">
@import './styles.css';

/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
   üî≤ CONTENEDOR GENERAL
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
.lista {
  padding: 2rem;
  background-color: var(--white);
  border-radius: 8px;
  margin: 2rem;
  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
}

.lista h2 {
  margin-bottom: 1.5rem;
  font-size: 1.5rem;
  font-family: var(--font-heading);
  color: var(--primary);
}

/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
   üìä TABLA BASE
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
.lista table {
  width: 100%;
  border-collapse: collapse;
  font-size: 0.95rem;
}

.lista th,
.lista td {
  padding: 0.8rem;
  text-align: left;
  border-bottom: 1px solid #ddd;
  vertical-align: middle;
  word-break: break-word;
}

.lista th {
  background-color: var(--neutral);
  font-weight: bold;
  font-size: 0.95rem;
  color: var(--gray-a);
}

.lista tr:hover {
  background-color: #f3f6f9;
}

.lista input[type="checkbox"] {
  transform: scale(1.2);
}

.tabla-scroll {
  overflow-x: auto;
  max-width: 100%;
}

.tabla-lista td {
  vertical-align: middle;
}

.acciones-columna {
  text-align: center;
  width: 130px;
}

/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
   üõ† BOTONES
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
.lista .btn-acciones {
  display: flex;
  gap: 0.5rem;
}

.lista button {
  padding: 0.4rem 0.8rem;
  border: none;
  border-radius: 4px;
  font-size: 0.85rem;
  cursor: pointer;
}

.lista .btn-editar {
  background-color: var(--primary);
  color: white;
}

.lista .btn-eliminar {
  background-color: var(--secondary);
  color: white;
}

/* Iconos con estilo pill (m√°s redondeado) */
.btn-icono {
  border: none;
  background-color: var(--neutral);
  padding: 0.4rem 0.6rem;
  border-radius: 6px;
  margin-right: 0.4rem;
  cursor: pointer;
  transition: background-color 0.3s ease;
}

.btn-icono:hover {
  background-color: #ddd;
}

.btn-icono .material-symbols-outlined {
  font-size: 20px;
  vertical-align: middle;
}

/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
   üü¢ ESTADOS (aprobado, pendiente, rechazado)
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
.estado {
  display: flex;
  align-items: center;
  gap: 0.4rem;
  font-weight: 500;
  text-transform: capitalize;
}

.estado.aprobado {
  color: var(--green);
}

.estado.pendiente {
  color: var(--orange);
}

.estado.rechazado {
  color: var(--secondary);
}

.estado span {
  font-size: 18px;
  vertical-align: middle;
}

/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
   üìÇ COLAPSABLES / ANIMACIONES
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
.titulo-colapsable {
  display: flex;
  justify-content: space-between;
  align-items: center;
  cursor: pointer;
  color: white;
  padding: 0.75rem 1rem;
  border-radius: 8px;
  margin-bottom: 0.5rem;
}

.btn-toggle {
  background: none;
  border: none;
  color: white;
  font-size: 1.5rem;
  cursor: pointer;
}

.fade-in {
  animation: fadeIn 0.3s ease-in;
}

@keyframes fadeIn {
  from {
    opacity: 0;
    transform: scaleY(0.95);
  }
  to {
    opacity: 1;
    transform: scaleY(1);
  }
}

/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
   üé® ICONOS (Material Symbols)
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
.material-symbols-outlined {
  font-variation-settings:
    'FILL' 0,
    'wght' 400,
    'GRAD' 0,
    'opsz' 20;
}

/* Vista compacta para Dashboard */
.lista.compacta {
  padding: 0;
  margin: 0;
  box-shadow: none;
  background-color: transparent;
  border-radius: 0;
}
</file>

<file path="frontend/src/hooks/useProyectos.js">
import { useEffect, useState } from 'react';
import api from '../services/api';

const useProyectos = () => {
  const [proyectos, setProyectos] = useState([]); // ahora es un array de features
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(false);

  useEffect(() => {
    const cargar = async () => {
      try {
        const res = await api.get('/proyectos/publicos');
        setProyectos(res.data.features); // üëà solo usamos el array de features
      } catch (e) {
        console.error("‚ùå Error al obtener proyectos:", e);
        setError(true);
      } finally {
        setLoading(false);
      }
    };
    cargar();
  }, []);

  return { proyectos, loading, error };
};
export default useProyectos;
</file>

<file path="frontend/src/index.js">
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App'; // ‚úÖ Este es tu componente principal
import reportWebVitals from './reportWebVitals';
import { UserProvider } from './context/UserContext';

const observerError = 'ResizeObserver loop completed with undelivered notifications.';
const resizeObserverErrMsg = 'ResizeObserver loop limit exceeded';

window.addEventListener('error', (e) => {
  if (e.message === resizeObserverErrMsg || e.message === observerError) {
    e.stopImmediatePropagation();
  }
});
console.log("API KEY:", process.env.REACT_APP_FIREBASE_API_KEY); 

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <UserProvider>
      <App />
    </UserProvider>
  </React.StrictMode>
);

reportWebVitals();
</file>

<file path="frontend/src/layout/AdminLayout.js">
import SideBarAdmin from "../components/SideBarAdmin";

const AdminLayout = ({ children }) => {
  return (
    <>
      <SideBarAdmin />
      <main className="admin-panel-content">
        {children}
      </main>
    </>
  );
};

export default AdminLayout;
</file>

<file path="frontend/src/pages/Home.js">
import { useEffect, useState } from "react";
import axios from "../services/api";
import MapaProyectos from "../components/MapaProyectos";
import Sidebar from "../components/Sidebar";
import Icono from "../components/Icono";
import { useNavigate } from "react-router-dom";
import "../css/home.css";

function Home() {
  const [categorias, setCategorias] = useState([]);
  const [comunas, setComunas] = useState([]);
  const [geojsonData, setGeojsonData] = useState([]);
  const [mensajeUsuario, setMensajeUsuario] = useState(null);
  const [cargando, setCargando] = useState(false);
  const [sidebarMinimizada, setSidebarMinimizada] = useState(false);
  const navigate = useNavigate();

  useEffect(() => {
    axios.get("/categorias").then((res) =>
      setCategorias(res.data.map((cat) => ({
        value: cat.id,
        label: cat.nombre,
      })))
    );

    axios.get("/comunas").then((res) =>
      setComunas(res.data.map((com) => ({
        value: com.id,
        label: com.nombre,
      })))
    );
  }, []);

  const handleResultados = async (geojson) => {
    setCargando(true);
    try {
      if (geojson?.features?.length > 0) {
        const agrupadas = {};
        geojson.features.forEach((f) => {
          const tipo = f.properties?.tipo?.toLowerCase() || "otros";
          if (!agrupadas[tipo]) agrupadas[tipo] = [];
          agrupadas[tipo].push(f);
        });

        const capasFormateadas = Object.entries(agrupadas).map(([tipo, features]) => ({
          tipo,
          data: {
            type: "FeatureCollection",
            features,
          },
        }));

        setGeojsonData(capasFormateadas);
        setMensajeUsuario({
          tipo: "success",
          texto: `Se encontraron ${geojson.features.length} proyecto(s).`,
        });
      } else {
        setGeojsonData([]);
        setMensajeUsuario({
          tipo: "info",
          texto: "No se encontraron proyectos para los filtros seleccionados.",
        });
      }
    } catch (error) {
      setMensajeUsuario({
        tipo: "error",
        texto: "Ocurri√≥ un error al procesar los datos.",
      });
    } finally {
      setCargando(false);
    }
  };

  return (
    <div className="visor-container">
      <Sidebar
        categorias={categorias}
        comunas={comunas}
        onResultados={handleResultados}
        onToggleMinimizada={setSidebarMinimizada}
      />

      <div className="mapa">
        <div className="topbar right">
          <button className="btn-admin" onClick={() => navigate("/admin")}>
            <Icono nombre="admin_panel_settings" /> √Årea Admin
          </button>
        </div>

        {cargando && (
          <div className="mensaje-info cargando">
            <Icono nombre="progress_activity" size={20} />
            Buscando proyectos...
          </div>
        )}

        {mensajeUsuario && (
          <div className={`toast-mensaje ${mensajeUsuario.tipo}`}>
            <Icono
              nombre={
                mensajeUsuario.tipo === "success"
                  ? "check_circle"
                  : mensajeUsuario.tipo === "info"
                  ? "info"
                  : "error"
              }
              className="icon-toast"
            />
            {mensajeUsuario.texto}
            <button onClick={() => setMensajeUsuario(null)}>‚úñ</button>
          </div>
        )}

        <MapaProyectos
          capas={geojsonData}
          limpiarCapas={() => setGeojsonData([])}
          sidebarMinimizada={sidebarMinimizada}
        />
      </div>
    </div>
  );
}

export default Home;
</file>

<file path="backend/app/models/parque.py">
from sqlalchemy import Column, Integer, String, Float, ForeignKey
from sqlalchemy.orm import relationship
from geoalchemy2 import Geometry
from app.database import Base

class Parque(Base):
    __tablename__ = "parque"

    id = Column(Integer, primary_key=True, index=True)
    nombre = Column(String, nullable=False)

    proyecto_id = Column(Integer, ForeignKey("proyecto.id"), nullable=False)
    proyecto = relationship("Proyecto", back_populates="parques")

    comuna_id = Column(Integer, ForeignKey("comuna.id"), nullable=False)
    comuna = relationship("Comuna")

    direccion = Column(String)
    superficie_ha = Column(Float)

    fuente_financiamiento_id = Column(Integer, ForeignKey("fuente_financiamiento.id"))
    fuente_financiamiento = relationship("FuenteFinanciamiento")

    geometria = Column(Geometry(geometry_type="POLYGON", srid=4326))
</file>

<file path="backend/app/routes/auth.py">
from fastapi import APIRouter, HTTPException, Request
from pydantic import BaseModel

router = APIRouter()

class UserOut(BaseModel):
    id: int
    nombre_usuario: str
    rol: str

@router.get("/auth/user", response_model=UserOut)
def get_authenticated_user(request: Request):
    user = request.state.user

    if not user:
        raise HTTPException(status_code=401, detail="Token inv√°lido o ausente")

    return {
        "id": user["usuario_id"],
        "nombre_usuario": user["nombre_usuario"],
        "rol": user["rol"]
    }
</file>

<file path="backend/app/schemas/__init__.py">
from .proyecto import ProyectoPublicoOut
from .parque import ParqueCreate, ParqueUpdate, ParqueOut, ParqueDetalleOut
from .pavimento import PavimentoCreate, PavimentoOut
from .proyecto import ProyectoOut
</file>

<file path="backend/app/schemas/pavimento.py">
from pydantic import BaseModel, Field
from typing import Optional, Union, Dict, Any, List
from .tipo_pavimento import TipoPavimentoOut

class EstadoAvanceOut(BaseModel):
    id: int
    nombre: str
    class Config:
        orm_mode = True

class ComunaOut(BaseModel):
    id: int
    nombre: str
    class Config:
        orm_mode = True

class PavimentoCreate(BaseModel):
    proyecto_id: int
    sector: str = Field(..., min_length=1)
    longitud_metros: float
    tipo_calzada_id: int
    estado_avance_id: int
    comuna_id: int
    geometria: Union[str, Dict[str, Any]]
    tipos_pavimento: List[int]
    class Config:
        orm_mode = True

class PavimentoUpdate(BaseModel):
    proyecto_id: Optional[int]
    sector: Optional[str] = Field(None, min_length=1)
    longitud_metros: Optional[float]
    tipo_calzada_id: Optional[int]
    tipos_pavimento: Optional[List[int]]
    estado_avance_id: Optional[int]
    comuna_id: Optional[int]
    geometria: Optional[Union[str, Dict[str, Any]]]
    class Config:
        orm_mode = True

class PavimentoOut(BaseModel):
    id: int
    proyecto_id: int
    sector: str
    longitud_metros: float
    tipo_calzada_id: int
    geometria: dict
    comuna: ComunaOut
    estado_avance: EstadoAvanceOut
    tipos_pavimento: List[TipoPavimentoOut]
    editable: bool 


    class Config:
        orm_mode = True
</file>

<file path="backend/app/schemas/proyecto.py">
from datetime import datetime
from pydantic import BaseModel
from typing import Optional
from .categoria import CategoriaOut


class CategoriaOut(BaseModel):
    id: int
    nombre: str

    model_config = {
        "from_attributes": True
    }

# ‚úÖ Esquema para crear/editar proyecto
class ProyectoCreate(BaseModel):
    nombre: str
    descripcion: Optional[str] = None
    categoria_id: int
    estado_proyecto: Optional[str] = "pendiente"

    model_config = {
        "from_attributes": True
    }

# ‚úÖ Esquema para respuestas generales
class ProyectoOut(ProyectoCreate):
    id: int
    fecha_creacion: Optional[datetime] = None

    model_config = {
        "from_attributes": True
    }

# ‚úÖ Esquema para respuestas p√∫blicas con categor√≠a embebida
class ProyectoPublicoOut(BaseModel):
    id: int
    nombre: str
    descripcion: Optional[str]
    estado_proyecto: str
    fecha_creacion: Optional[datetime]
    categoria: CategoriaOut

    model_config = {
        "from_attributes": True
    }

# ‚úÖ Esquema simple para usar dentro de ParqueDetalleOut
class ProyectoOutSimple(BaseModel):
    id: int
    nombre: str

    model_config = {
        "from_attributes": True
    }

class ProyectoOutConCategoria(ProyectoOut):
    categoria: Optional[CategoriaOut]

    model_config = {
        "from_attributes": True
    }
</file>

<file path="backend/app/utils/firebase_auth.py">
import os
import json
import firebase_admin
from firebase_admin import credentials, initialize_app, auth

# Inicializaci√≥n
if not firebase_admin._apps:
    config_str = os.getenv("FIREBASE_CONFIG_JSON")
    if not config_str:
        raise ValueError("‚ùå Variable FIREBASE_CONFIG_JSON no encontrada")

    firebase_config = json.loads(config_str)
    firebase_config["private_key"] = firebase_config["private_key"].replace("\\n", "\n")
    cred = credentials.Certificate(firebase_config)
    initialize_app(cred)

# Verificaci√≥n del token
def verify_token(token: str):
    try:
        decoded_token = auth.verify_id_token(token)
        return decoded_token
    except Exception as e:
        raise Exception(f"Token inv√°lido: {str(e)}")
</file>

<file path="frontend/src/App.js">
import { useEffect } from "react";
import { BrowserRouter as Router, Routes, Route, Navigate } from "react-router-dom";
import LoadingScreen from "./components/LoadingScreen";

import './css/styles.css';

// P√°ginas y componentes
import Home from "./pages/Home";
import Admin from "./pages/Admin";
import Login from "./pages/Login";
import ListaLogCambios from "./components/admin/ListaLogCambios";
import EditarPavimento from "./components/EditarPavimento";
import EditarParque from "./components/EditarParque";
import AdminLayout from "./layout/AdminLayout";
import FormularioParque from "./components/FormularioParque";
import GestionProyectos from "./components/admin/GestionProyectos";
import GestionPavimentos from "./components/admin/GestionPavimentos";
import GestionParques from "./components/admin/GestionParques";
import CrearProyecto from "./components/admin/CrearProyecto";
import ListaProyectosPendientes from "./components/admin/ListaProyectosPendientes"; 
import EditarProyecto from "./components/admin/EditarProyecto"

// Contexto de usuario
import { useUser } from "./context/UserContext";

function AppRoutes() {
  const { firebaseUser, perfil, loading } = useUser();

  useEffect(() => {
    const timeout = setTimeout(() => {
      if (loading || (firebaseUser && !perfil)) {
        window.location.reload();
      }
    }, 10000);
    return () => clearTimeout(timeout);
  }, [loading, firebaseUser, perfil]);

  if (loading || (firebaseUser && !perfil)) {
    return <LoadingScreen />;
  }

  return (
    <Routes>
      <Route path="/" element={<Home />} />

      {/* Panel de administraci√≥n */}
      <Route
        path="/admin"
        element={firebaseUser && perfil?.rol ? <Admin /> : <Navigate to="/login" replace />}
      />

      <Route
        path="/admin/crear-proyecto"
        element={firebaseUser && perfil?.rol ? <CrearProyecto /> : <Navigate to="/login" replace />}
      />

      <Route
        path="/admin/gestion-proyectos"
        element={firebaseUser && perfil?.rol ? <GestionProyectos /> : <Navigate to="/login" replace />}
      />

      <Route
        path="/admin/proyectos/pendientes"
        element={firebaseUser && perfil?.rol === "admin" ? <ListaProyectosPendientes /> : <Navigate to="/login" replace />}
      />

<Route
  path="/admin/editar-proyecto/:id"
  element={firebaseUser && perfil?.rol ? <EditarProyecto /> : <Navigate to="/login" replace />}
/>



      <Route
        path="/admin/gestion-pavimentos"
        element={firebaseUser && perfil?.rol !== "visitante" ? <GestionPavimentos /> : <Navigate to="/login" replace />}
      />

      <Route
        path="/admin/gestion-parques"
        element={firebaseUser && perfil?.rol !== "visitante" ? <GestionParques /> : <Navigate to="/login" replace />}
      />

      <Route
        path="/admin/editar-parque/:id"
        element={firebaseUser && perfil?.rol ? <EditarParque /> : <Navigate to="/login" replace />}
      />

      <Route
        path="/admin/editar-pavimento/:id"
        element={firebaseUser && perfil?.rol ? <EditarPavimento /> : <Navigate to="/login" replace />}
      />

      <Route
        path="/admin/log-cambios"
        element={firebaseUser && perfil?.rol ? <AdminLayout><ListaLogCambios /></AdminLayout> : <Navigate to="/login" replace />}
      />

      <Route
        path="/admin/crear-parque"
        element={firebaseUser && perfil?.rol ? <FormularioParque /> : <Navigate to="/login" replace />}
      />

      <Route
        path="/admin/editar-parque/:id"
        element={firebaseUser && perfil?.rol ? <FormularioParque modoEdicion={true} /> : <Navigate to="/login" replace />}
      />

      {/* Login */}
      <Route
        path="/login"
        element={firebaseUser ? <Navigate to="/admin" replace /> : <Login />}
      />

      {/* Fallback */}
      <Route path="*" element={<Navigate to="/" replace />} />
    </Routes>
  );
}

function App() {
  return (
    <Router>
      <AppRoutes />
    </Router>
  );
}

export default App;
</file>

<file path="frontend/src/components/admin/GestionParques.js">
import React, { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import api from "../../services/api";
import { useUser } from "../../context/UserContext";
import AdminLayout from "../../layout/AdminLayout";
import Icono from "../Icono";
import "../../css/listas.css";

const GestionParques = () => {
  const [parques, setParques] = useState([]);
  const [colapsado, setColapsado] = useState(false);
  const { perfil } = useUser();
  const navigate = useNavigate();

  useEffect(() => {
    api.get("/parques/")
      .then(res => {
        console.log("üì¶ Parques cargados:", res.data);
        setParques(res.data);
      })
      .catch(err => console.error("‚ùå Error al cargar parques:", err));
  }, []);

  const handleEditar = (id) => navigate(`/admin/editar-parque/${id}`);

  const handleEliminar = async (id) => {
    if (!window.confirm("¬øEliminar este parque?")) return;
    try {
      await api.delete(`/parques/${id}`);
      setParques(prev => prev.filter(p => p.id !== id));
    } catch (err) {
      console.error("‚ùå Error al eliminar:", err);
    }
  };

  const renderEstado = (estado) => {
    if (!estado) return (
      <span className="estado sin-estado">
        <Icono nombre="help_outline" size={18} />
        Sin estado
      </span>
    );

    const nombre = estado.toLowerCase();
    const icon = nombre === "aprobado" ? "mood" : nombre === "pendiente" ? "pending" : "cancel";
    const clase = nombre === "aprobado" ? "estado aprobado" : nombre === "pendiente" ? "estado pendiente" : "estado rechazado";

    return (
      <span className={clase}>
        <Icono nombre={icon} size={18} />
        {estado}
      </span>
    );
  };

  return (
    <AdminLayout>
      <div className="lista">
        <div className="titulo-colapsable" onClick={() => setColapsado(!colapsado)}>
          <h2 className="font-level-2 text-primary">
            <span className="material-symbols-outlined">park</span> Parques urbanos
          </h2>
          <button className="btn-toggle" title="Colapsar/Expandir">
            <Icono nombre={colapsado ? "expand_more" : "expand_less"} />
          </button>
        </div>

        {!colapsado && (
          <div className="tabla-scroll fade-in">
            <table className="tabla-lista">
              <thead>
                <tr>
                  <th></th>
                  <th>Nombre</th>
                  <th>Comuna</th>
                  <th>Estado</th>
                  {perfil?.rol !== "visitante" && <th className="acciones-columna">Acciones</th>}
                </tr>
              </thead>
              <tbody>
                {parques.length > 0 ? (
                  parques.map((p) => (
                    <tr key={p.id}>
                      <td><input type="checkbox" /></td>
                      <td>{p.nombre || "Sin nombre"}</td>
                      <td>{p.comuna?.nombre || "Sin comuna"}</td>
                      <td>{renderEstado(p.proyecto?.estado_proyecto)}</td>
                      {perfil?.rol !== "visitante" && (
                        <td>
                          <div className="btn-acciones">
                            <button
                              className="btn-icono"
                              onClick={() => p.editable && handleEditar(p.id)}
                              disabled={!p.editable}
                              title={p.editable ? "Editar parque" : "No tienes permisos para editar"}
                            >
                              <span className="material-symbols-outlined">edit</span>
                            </button>

                            {perfil.rol === "admin" && (
                              <button
                                className="btn-icono btn-eliminar"
                                onClick={() => handleEliminar(p.id)}
                                title="Eliminar parque"
                              >
                                <span className="material-symbols-outlined">delete</span>
                              </button>
                            )}
                          </div>
                        </td>
                      )}
                    </tr>
                  ))
                ) : (
                  <tr><td colSpan="5">No hay parques registrados.</td></tr>
                )}
              </tbody>
            </table>
          </div>
        )}
      </div>
    </AdminLayout>
  );
};

export default GestionParques;
</file>

<file path="frontend/src/components/admin/ListaPavimentos.js">
// src/components/listas/ListaPavimentos.jsx
import React, { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import api from "../../services/api";
import { useUser } from "../../context/UserContext";
import Icono from "../Icono";
import "../../css/listas.css";

const ListaPavimentos = () => {
  const [pavimentos, setPavimentos] = useState([]);
  const [colapsado, setColapsado] = useState(false);
  const { perfil } = useUser();
  const navigate = useNavigate();

  useEffect(() => {
    api.get("/pavimentos/")
      .then(res => setPavimentos(res.data))
      .catch(err => console.error("‚ùå Error al cargar pavimentos:", err));
  }, []);

  const handleEditar = (id) => navigate(`/admin/editar-pavimento/${id}`);

  const handleEliminar = async (id) => {
    if (!window.confirm("¬øEliminar este pavimento?")) return;
    try {
      await api.delete(`/pavimentos/${id}`);
      setPavimentos(prev => prev.filter(p => p.id !== id));
    } catch (err) {
      console.error("‚ùå Error al eliminar:", err);
    }
  };

  const renderEstado = (nombre) => {
    const estado = nombre?.toLowerCase();
    const icon = estado === "terminada" ? "check_circle" : estado === "en ejecuci√≥n" ? "schedule" : "pending";
    const clase = estado === "terminada" ? "estado aprobado" : estado === "en ejecuci√≥n" ? "estado pendiente" : "estado rechazado";

    return (
      <span className={clase}>
        <Icono nombre={icon} size={18} />
        {nombre || "Sin estado"}
      </span>
    );
  };

  return (
    <div className="lista">
      <div className="titulo-colapsable" onClick={() => setColapsado(!colapsado)}>
        <h2 className="font-level-2 text-primary">
          <span className="material-symbols-outlined">construction</span> Pavimentos y V√≠as Locales
        </h2>
        <button className="btn-toggle"><Icono nombre={colapsado ? "expand_more" : "expand_less"} /></button>
      </div>

      {!colapsado && (
        <div className="tabla-scroll fade-in">
          <table className="tabla-lista">
            <thead>
              <tr>
                <th></th>
                <th>Sector</th>
                <th>Comuna</th>
                <th>Estado</th>
                {perfil?.rol !== "visitante" && <th className="acciones-columna">Acciones</th>}
              </tr>
            </thead>
            <tbody>
              {pavimentos.length > 0 ? (
                pavimentos.map((p) => (
                  <tr key={p.id}>
                    <td><input type="checkbox" /></td>
                    <td>{p.sector}</td>
                    <td>{p.comuna?.nombre || "Sin comuna"}</td>
                    <td>{renderEstado(p.estado_avance?.nombre)}</td>
                    {perfil?.rol !== "visitante" && (
                      <td>
                        <div className="btn-acciones">
                          <button
                            className={`btn-icono ${!p.editable ? "btn-disabled" : ""}`}
                            onClick={() => p.editable && handleEditar(p.id)}
                            disabled={!p.editable}
                          >
                            <span className="material-symbols-outlined">edit</span>
                          </button>
                          {perfil.rol === "admin" && (
                            <button
                              className="btn-icono btn-eliminar"
                              onClick={() => handleEliminar(p.id)}
                            >
                              <span className="material-symbols-outlined">delete</span>
                            </button>
                          )}
                        </div>
                      </td>
                    )}
                  </tr>
                ))
              ) : (
                <tr><td colSpan="5">No hay pavimentos registrados.</td></tr>
              )}
            </tbody>
          </table>
        </div>
      )}
    </div>
  );
};

export default ListaPavimentos;
</file>

<file path="frontend/src/components/admin/ListaProyectos.js">
import React, { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import api from "../../services/api";
import { useUser } from "../../context/UserContext";
import Icono from "../Icono";
import "../../css/listas.css";

const ListaProyectos = () => {
  const [proyectos, setProyectos] = useState([]);
  const [colapsado, setColapsado] = useState(false);
  const { perfil } = useUser();
  const navigate = useNavigate();

  useEffect(() => {
    api.get("/proyectos/aprobados")
      .then(res => setProyectos(res.data))
      .catch(err => console.error("‚ùå Error al cargar proyectos:", err));
  }, []);

  const handleEditar = (id) => navigate(`/admin/editar-proyecto/${id}`);

  const handleEliminar = async (id) => {
    if (!window.confirm("¬øEliminar este proyecto?")) return;
    try {
      await api.delete(`/proyectos/${id}`);
      setProyectos(prev => prev.filter(p => p.id !== id));
    } catch (err) {
      console.error("‚ùå Error al eliminar:", err);
    }
  };

  const renderEstado = (estado) => {
    const icon = estado === "aprobado" ? "check_circle" : estado === "pendiente" ? "schedule" : "cancel";
    const clase = estado === "aprobado"
      ? "estado aprobado"
      : estado === "pendiente"
      ? "estado pendiente"
      : "estado rechazado";

    return (
      <span className={clase}>
        <Icono nombre={icon} size={18} />
        {estado.charAt(0).toUpperCase() + estado.slice(1)}
      </span>
    );
  };

  return (
    <div className="lista">
      <div className="titulo-colapsable" onClick={() => setColapsado(!colapsado)}>
        <h2 className="font-level-2 text-primary">
          <span className="material-symbols-outlined">folder</span> Gesti√≥n de proyectos
        </h2>
        <button className="btn-toggle">
          <Icono nombre={colapsado ? "expand_more" : "expand_less"} />
        </button>
      </div>

      {!colapsado && (
        <div className="tabla-scroll fade-in">
          <table className="tabla-lista">
            <thead>
              <tr>
                <th><Icono nombre="check_box_outline_blank" /></th>
                <th>Nombre</th>
                <th>Estado</th>
                {perfil?.rol !== "visitante" && <th className="acciones-columna">Acciones</th>}
              </tr>
            </thead>
            <tbody>
              {proyectos.length > 0 ? (
                proyectos.map((p) => (
                  <tr key={p.id}>
                    <td><input type="checkbox" /></td>
                    <td>{p.nombre}</td>
                    <td>{renderEstado(p.estado_proyecto)}</td>
                    {perfil?.rol !== "visitante" && (
                      <td>
                        <div className="btn-acciones">
                          <button className="btn-icono" onClick={() => handleEditar(p.id)}>
                            <span className="material-symbols-outlined">edit</span>
                          </button>
                          {perfil.rol === "admin" && (
                            <button className="btn-icono btn-eliminar" onClick={() => handleEliminar(p.id)}>
                              <span className="material-symbols-outlined">delete</span>
                            </button>
                          )}
                        </div>
                      </td>
                    )}
                  </tr>
                ))
              ) : (
                <tr>
                  <td colSpan={perfil?.rol !== "visitante" ? 4 : 3}>
                    No hay proyectos registrados.
                  </td>
                </tr>
              )}
            </tbody>
          </table>
        </div>
      )}
    </div>
  );
};

export default ListaProyectos;
</file>

<file path="frontend/src/components/FormularioParque.js">
import { useEffect, useState } from "react";
import Select from "react-select";
import api from "../services/api";
import VistaPreviaGeojson from "./VistaPreviaGeojson";
import { useNavigate } from "react-router-dom";
import proj4 from "proj4";
import "../css/formularios.css";

proj4.defs("EPSG:32718", "+proj=utm +zone=18 +south +datum=WGS84 +units=m +no_defs");

const convertirArcGISToPolygonGeoJSON = (arcgisJson) => {
  const coordsUTM = arcgisJson.rings?.[0];
  if (!coordsUTM || !Array.isArray(coordsUTM)) return null;

  const coordsLatLon = coordsUTM.map(([x, y]) =>
    proj4("EPSG:32718", "EPSG:4326", [x, y])
  );

  const closed = [...coordsLatLon];
  if (
    closed.length > 0 &&
    (closed[0][0] !== closed[closed.length - 1][0] ||
      closed[0][1] !== closed[closed.length - 1][1])
  ) {
    closed.push(closed[0]);
  }

  return {
    type: "Polygon",
    coordinates: [closed],
  };
};

const FormularioParque = ({ modoEdicion = false, parqueId = null, proyectoIdSeleccionado = null }) => {
  const [formData, setFormData] = useState({
    nombre: "",
    direccion: "",
    superficie_ha: "",
    comuna_id: null,
    fuente_financiamiento_id: null,
    proyecto_id: null,
    geometria: JSON.stringify({
      type: "Polygon",
      coordinates: [
        [
          [-73.051, -36.828],
          [-73.05, -36.829],
          [-73.049, -36.8285],
          [-73.051, -36.828]
        ]
      ]
    }, null, 2),
  });

  const [geoValido, setGeoValido] = useState(true);
  const [comunas, setComunas] = useState([]);
  const [fuentes, setFuentes] = useState([]);
  const [error, setError] = useState("");
  const [mensaje, setMensaje] = useState("");
  const navigate = useNavigate();

  // Cargar proyecto_id si se pasa como prop
  useEffect(() => {
    if (proyectoIdSeleccionado) {
      setFormData((prev) => ({ ...prev, proyecto_id: proyectoIdSeleccionado }));
    }
  }, [proyectoIdSeleccionado]);

  useEffect(() => {
    const fetchData = async () => {
      const [resComunas, resFuentes] = await Promise.all([
        api.get("/comunas"),
        api.get("/fuente-financiamiento"),
      ]);
      setComunas(resComunas.data);
      setFuentes(resFuentes.data);

      if (modoEdicion && parqueId) {
        const res = await api.get(`/parques`);
        const parque = res.data.find((p) => p.id === Number(parqueId));
        if (parque) {
          setFormData({
            nombre: parque.nombre,
            direccion: parque.direccion || "",
            superficie_ha: parque.superficie_ha || "",
            comuna_id: parque.comuna_id,
            fuente_financiamiento_id: parque.fuente_financiamiento_id,
            proyecto_id: parque.proyecto_id,
            geometria: JSON.stringify(parque.geometria, null, 2),
          });
        }
      }
    };

    fetchData();
  }, [modoEdicion, parqueId]);

  const handleChange = (field, value) => {
    if (field === "geometria") {
      try {
        const parsed = JSON.parse(value);
        if (parsed.rings && parsed.spatialReference?.wkid === 32718) {
          const polygon = convertirArcGISToPolygonGeoJSON(parsed);
          if (polygon) {
            setFormData((prev) => ({ ...prev, geometria: JSON.stringify(polygon, null, 2) }));
            setGeoValido(true);
          } else {
            setFormData((prev) => ({ ...prev, geometria: value }));
            setGeoValido(false);
          }
        } else if (parsed.type === "Polygon" && parsed.coordinates) {
          setFormData((prev) => ({ ...prev, geometria: value }));
          setGeoValido(true);
        } else {
          setFormData((prev) => ({ ...prev, geometria: value }));
          setGeoValido(false);
        }
      } catch {
        setFormData((prev) => ({ ...prev, geometria: value }));
        setGeoValido(false);
      }
    } else {
      setFormData((prev) => ({ ...prev, [field]: value }));
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError("");
    setMensaje("");

    let geoObjeto;
    try {
      geoObjeto = JSON.parse(formData.geometria);
    } catch (e) {
      setError("‚ùå Geometr√≠a inv√°lida");
      return;
    }

    console.log("üßæ Proyecto ID actual:", formData.proyecto_id);  // <- console log agregado

    if (!formData.proyecto_id) {
      setError("‚ùå No se ha asociado un proyecto v√°lido.");
      return;
    }

    const payload = {
      ...formData,
      superficie_ha: parseFloat(formData.superficie_ha) || null,
      geometria: geoObjeto,
    };

    try {
      if (modoEdicion) {
        const res = await api.put(`/parques/${parqueId}`, payload);
        setMensaje(res.data.mensaje || "‚úÖ Actualizado correctamente");
      } else {
        await api.post("/parques", payload);
        setMensaje("‚úÖ Parque creado correctamente");
      }

      setTimeout(() => navigate("/admin/parques"), 1000);
    } catch (err) {
      const msg = err.response?.data?.detail || "‚ùå Error al guardar el parque";
      setError(msg);
    }
  };

  return (
    <form className="formulario" onSubmit={handleSubmit}>
      <h2>{modoEdicion ? "Editar Parque" : "Crear Parque"}</h2>

      <label>Nombre</label>
      <input type="text" value={formData.nombre} onChange={(e) => handleChange("nombre", e.target.value)} required />

      <label>Direcci√≥n</label>
      <input type="text" value={formData.direccion} onChange={(e) => handleChange("direccion", e.target.value)} />

      <label>Superficie (ha)</label>
      <input type="number" step="0.01" value={formData.superficie_ha} onChange={(e) => handleChange("superficie_ha", e.target.value)} />

      <label>Comuna</label>
      <Select
        options={comunas.map((c) => ({ value: c.id, label: c.nombre }))}
        value={comunas.find((c) => c.id === formData.comuna_id) && {
          value: formData.comuna_id,
          label: comunas.find((c) => c.id === formData.comuna_id)?.nombre,
        }}
        onChange={(opt) => handleChange("comuna_id", opt.value)}
      />

      <label>Fuente de Financiamiento</label>
      <Select
        options={fuentes.map((f) => ({ value: f.id, label: f.nombre }))}
        value={fuentes.find((f) => f.id === formData.fuente_financiamiento_id) && {
          value: formData.fuente_financiamiento_id,
          label: fuentes.find((f) => f.id === formData.fuente_financiamiento_id)?.nombre,
        }}
        onChange={(opt) => handleChange("fuente_financiamiento_id", opt?.value || null)}
        isClearable
      />

      <label>Geometr√≠a (GeoJSON o ArcGIS JSON)</label>
      <textarea
        rows={6}
        value={formData.geometria}
        onChange={(e) => handleChange("geometria", e.target.value)}
        required
        style={{ border: `2px solid ${geoValido ? "green" : "red"}`, width: "100%", fontFamily: "monospace", padding: "8px" }}
      />
      <small style={{ color: geoValido ? "#666" : "red" }}>
        {geoValido ? "‚úÖ Geometr√≠a v√°lida (GeoJSON o ArcGIS JSON transformado)" : "‚ùå Formato no reconocido o inv√°lido."}
      </small>

      <VistaPreviaGeojson geojsonString={formData.geometria} tipoEsperado="Polygon" />

      {error && <p className="error">{Array.isArray(error) ? error.join(" / ") : error}</p>}
      {mensaje && <p className="success">{mensaje}</p>}

      <button type="submit">{modoEdicion ? "Actualizar" : "Crear"}</button>
    </form>
  );
};

export default FormularioParque;
</file>

<file path="frontend/src/components/VistaPreviaGeojson.js">
// src/components/VistaPreviaGeojson.jsx
import { MapContainer, TileLayer, GeoJSON } from "react-leaflet";
import { useEffect, useState } from "react";

export default function VistaPreviaGeojson({ geojsonString, tipoEsperado }) {
  const [geojson, setGeojson] = useState(null);

  useEffect(() => {
    try {
      const obj = JSON.parse(geojsonString);

      const esValido =
        obj &&
        obj.type &&
        ["LineString", "Polygon", "MultiPolygon"].includes(obj.type);

      if (esValido && (!tipoEsperado || obj.type === tipoEsperado)) {
        setGeojson({
          type: "Feature",
          geometry: obj,
          properties: {},
        });
      } else {
        setGeojson(null);
      }
    } catch {
      setGeojson(null);
    }
  }, [geojsonString, tipoEsperado]);

  if (!geojson)
    return (
      <p style={{ color: "red", marginTop: "0.5rem" }}>
        ‚ùå Geometr√≠a inv√°lida, vac√≠a o no coincide con el tipo esperado.
      </p>
    );

  // üß≠ C√°lculo de centro
  const getCentro = (geometry) => {
    const { type, coordinates } = geometry;

    if (type === "LineString") {
      return coordinates[0]?.slice().reverse() || [-36.82, -73.05];
    }

    if (type === "Polygon") {
      return coordinates[0]?.[0]?.slice().reverse() || [-36.82, -73.05];
    }

    if (type === "MultiPolygon") {
      return coordinates[0]?.[0]?.[0]?.slice().reverse() || [-36.82, -73.05];
    }

    return [-36.82, -73.05];
  };

  const center = getCentro(geojson.geometry);

  return (
    <MapContainer
      style={{ height: "300px", marginTop: "1rem", borderRadius: "8px" }}
      center={center}
      zoom={17}
      scrollWheelZoom={false}
    >
      <TileLayer url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png" />
      <GeoJSON key={JSON.stringify(geojson)} data={geojson} />
    </MapContainer>
  );
}
</file>

<file path="frontend/src/css/styles.css">
@import url('https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&family=Roboto+Slab:wght@400;500;700&display=swap');
@import url('https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined');

:root {
  --primary: #006FB3;
  --primary-dark: #004b8f;
  --secondary: #FE6565;
  --tertiary: #0A132D;
  --accent: #A8B7C7;
  --neutral: #EEEEEE;

  --gray-a: #4A4A4A;
  --gray-b: #8A8A8A;
  --black: #111111;
  --white: #FFFFFF;

  --purple: #6633CC;
  --orange: #E0701E;
  --orange-light: #FFA11B;
  --green: #2D717C;

  --font-base: 'Roboto', sans-serif;
  --font-heading: 'Roboto Slab', serif;
}

/* Espaciado vertical y horizontal (margin/padding) */
.m-0  { margin: 0 !important; }
.m-1  { margin: 0.5rem !important; }
.m-2  { margin: 1rem !important; }
.m-3  { margin: 1.5rem !important; }

.mt-0 { margin-top: 0 !important; }
.mt-1 { margin-top: 0.5rem !important; }
.mt-2 { margin-top: 1rem !important; }
.mt-3 { margin-top: 1.5rem !important; }

.mb-0 { margin-bottom: 0 !important; }
.mb-1 { margin-bottom: 0.5rem !important; }
.mb-2 { margin-bottom: 1rem !important; }
.mb-3 { margin-bottom: 1.5rem !important; }

.ml-1 { margin-left: 0.5rem !important; }
.ml-2 { margin-left: 1rem !important; }
.ml-3 { margin-left: 1.5rem !important; }

.mr-1 { margin-right: 0.5rem !important; }
.mr-2 { margin-right: 1rem !important; }
.mr-3 { margin-right: 1.5rem !important; }

.p-0  { padding: 0 !important; }
.p-1  { padding: 0.5rem !important; }
.p-2  { padding: 1rem !important; }
.p-3  { padding: 1.5rem !important; }

.pt-1 { padding-top: 0.5rem !important; }
.pb-1 { padding-bottom: 0.5rem !important; }
.pl-1 { padding-left: 0.5rem !important; }
.pr-1 { padding-right: 0.5rem !important; }


* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: var(--font-base);
  background-color: var(--neutral);
  color: var(--gray-a);
}

/* Utilidades */
.text-primary       { color: var(--primary); }
.text-secondary     { color: var(--secondary); }
.text-tertiary      { color: var(--tertiary); }
.text-accent        { color: var(--accent); }
.text-gray-a        { color: var(--gray-a); }
.text-gray-b        { color: var(--gray-b); }
.text-black         { color: var(--black); }
.text-white         { color: var(--white); }

.bg-primary         { background-color: var(--primary); }
.bg-secondary       { background-color: var(--secondary); }
.bg-tertiary        { background-color: var(--tertiary); }
.bg-accent          { background-color: var(--accent); }
.bg-neutral         { background-color: var(--neutral); }

.border-primary     { border: 1px solid var(--primary); }
.border-accent      { border: 1px solid var(--accent); }
.border-gray-a      { border: 1px solid var(--gray-a); }

/* Tipograf√≠a */
h1, .font-level-1 { font-family: var(--font-heading); font-size: 2.4rem; font-weight: 400; }
h2, .font-level-2 { font-family: var(--font-heading); font-size: 1.6875rem; font-weight: 400; }
h3, .font-level-3 { font-family: var(--font-heading); font-size: 1.4375rem; font-weight: 400; }

.font-base        { font-family: var(--font-base); font-size: 1rem; }

/* Tipograf√≠a jer√°rquica completa */

.font-level-1 {
  font-family: var(--font-heading);
  font-size: 2.4rem;     /* 38.4px */
  font-weight: 400;
  line-height: 1.2;
  color: var(--gray-a);
}

.font-level-2 {
  font-family: var(--font-heading);
  font-size: 1.6875rem;  /* 27px */
  font-weight: 400;
  line-height: 1.3;
  color: var(--gray-a);
}

.font-level-3 {
  font-family: var(--font-heading);
  font-size: 1.4375rem;  /* 23px */
  font-weight: 400;
  line-height: 1.3;
  color: var(--gray-a);
}

.font-level-4 {
  font-family: var(--font-base);
  font-size: 1.25rem;    /* 20px */
  font-weight: 400;
  line-height: 1.4;
  color: var(--gray-a);
}

.font-level-5 {
  font-family: var(--font-heading);
  font-size: 1.25rem;    /* 20px */
  font-weight: 500;
  line-height: 1.4;
  color: var(--gray-a);
}

.font-level-6 {
  font-family: var(--font-heading);
  font-size: 1.125rem;   /* 18px */
  font-weight: 500;
  line-height: 1.4;
  color: var(--gray-a);
}

.font-level-7 {
  font-family: var(--font-base);
  font-size: 1rem;       /* 16px */
  font-weight: 400;
  line-height: 1.5;
  color: var(--gray-a);
}

.font-level-8 {
  font-family: var(--font-base);
  font-size: 0.875rem;   /* 14px */
  font-weight: 400;
  line-height: 1.5;
  color: var(--gray-b);
}


/* Botones */
.btn {
  font-family: var(--font-base);
  font-weight: 600;
  border: none;
  cursor: pointer;
  border-radius: 4px;
  transition: background-color 0.3s ease, border-color 0.3s ease;
}

.btn-primary {
  background-color: var(--primary);
  color: var(--white);
}
.btn-primary:hover {
  background-color: var(--primary-dark);
}

.btn-neutral {
  background-color: var(--neutral);
  color: var(--gray-a);
  border: 1px solid var(--gray-b);
}
.btn-neutral:hover {
  background-color: #ddd;
  color: var(--black);
}

/* √çconos institucionales */
.material-symbols-outlined {
  font-family: 'Material Symbols Outlined';
  font-weight: normal;
  font-style: normal;
  font-size: 24px;
  display: inline-block;
  line-height: 1;
  font-variation-settings: 'FILL' 0, 'wght' 400, 'GRAD' 0, 'opsz' 24;
}

/* Para mantener los botones agrupados uno sobre otro */
.custom-control-box {
  display: flex;
  flex-direction: column;
  gap: 4px;
}


.btn-editar.btn-disabled {
  background-color: #ccc !important;
  color: #555 !important;
  cursor: not-allowed !important;
  border: 1px solid #aaa !important;
}

.btn-disabled {
  background-color: var(--gray-b);
  color: var(--white);
  cursor: not-allowed;
}

.btn-icono.btn-disabled {
  background-color: #ddd !important;
  color: #999 !important;
  cursor: not-allowed !important;
  pointer-events: none;
  border: 1px solid #aaa !important;
}
</file>

<file path="frontend/src/pages/Admin.js">
import ListaProyectos from "../components/admin/ListaProyectos";
import ListaPavimentos from "../components/admin/ListaPavimentos"
import ListaParques from "../components/admin/ListaParques"
import DashboardResumen from "../components/admin/DashboardResumen";
import AdminLayout from "../layout/AdminLayout";
import Icono from "../components/Icono";
import "../css/admin.css";

const Admin = () => {
  return (
    <AdminLayout>
      <div className="encabezado-admin">
        <div>
          <h2 className="font-level-2 text-primary mb-3">Panel de administraci√≥n</h2>
        </div>
        <button className="icon-button" title="Notificaciones">
          <Icono nombre="notifications" />
        </button>
      </div>

      <DashboardResumen />

      <div className="seccion-admin">
        <ListaProyectos limite={5} />
      </div>

      <div className="seccion-admin">
        <ListaPavimentos limite={5} />
      </div>

      <div className="seccion-admin">
        <ListaParques limite={5} />
      </div>
    </AdminLayout>
  );
};

export default Admin;
</file>

<file path="frontend/src/services/api.js">
import axios from "axios";
import { getAuth } from "firebase/auth";

const api = axios.create({
  baseURL: process.env.REACT_APP_API_URL,
});

api.interceptors.request.use(
  async (config) => {
    const auth = getAuth();
    const user = auth.currentUser;

    if (user) {
      const token = await user.getIdToken();
      config.headers.Authorization = `Bearer ${token}`;
    }

    return config;
  },
  (error) => Promise.reject(error)
);

export default api;
</file>

<file path="backend/app/models/pavimento.py">
from sqlalchemy import Column, Integer, ForeignKey, Float, Text
from sqlalchemy.orm import relationship
from geoalchemy2 import Geometry
from app.database import Base

class Pavimento(Base):
    __tablename__ = "pavimento"

    id = Column(Integer, primary_key=True, index=True)
    proyecto_id = Column(Integer, ForeignKey("proyecto.id"), nullable=False)
    comuna_id = Column(Integer, ForeignKey("comuna.id"), nullable=False)
    sector = Column(Text, nullable=False)
    tipo_calzada_id = Column(Integer, ForeignKey("tipo_calzada.id"), nullable=False)
    estado_avance_id = Column(Integer, ForeignKey("estado_avance.id"), nullable=False)
    longitud_metros = Column(Float, nullable=False)
    geometria = Column(Geometry("LINESTRING", srid=4326), nullable=False)
    


    # Relaciones
    proyecto = relationship("Proyecto", back_populates="pavimentos")
    comuna = relationship("Comuna", back_populates="pavimentos")
    tipo_calzada = relationship("TipoCalzada", backref="pavimentos")
    estado_avance = relationship("EstadoAvance", backref="pavimentos")
</file>

<file path="backend/app/routes/parque.py">
from typing import List
from fastapi import APIRouter, Depends, HTTPException, Request
from sqlalchemy.orm import Session, selectinload
from geoalchemy2.shape import from_shape
from shapely.geometry import shape

from app.database import get_db
from app.models.parque import Parque
from app.models.proyecto import Proyecto
from app.models.usuario import Usuario
from app.schemas.parque import ParqueOut, ParqueCreate, ParqueUpdate
from app.routes.usuario import get_current_user
from app.utils.geo import convertir_wkb_a_geojson, validar_y_convertir_geojson


router = APIRouter(prefix="/parques", tags=["Parques"])


@router.get("/", response_model=list[ParqueOut])
def listar_parques(db: Session = Depends(get_db), request: Request = None):
    parques = db.query(Parque).options(
        selectinload(Parque.comuna),
        selectinload(Parque.fuente_financiamiento),
        selectinload(Parque.proyecto)
    ).all()

    user = request.state.user if request else None
    resultados = []

    for p in parques:
        comuna_dict = {
            "id": p.comuna.id,
            "nombre": p.comuna.nombre,
            "provincia_id": p.comuna.provincia_id
        } if p.comuna else None

        fuente_dict = {
            "id": p.fuente_financiamiento.id,
            "nombre": p.fuente_financiamiento.nombre
        } if p.fuente_financiamiento else None

        proyecto_dict = {
            "id": p.proyecto.id,
            "nombre": p.proyecto.nombre,
            "categoria_id": p.proyecto.categoria_id,
            "estado_proyecto": p.proyecto.estado_proyecto.value,
            "fecha_creacion": p.proyecto.fecha_creacion
        } if p.proyecto else None

        editable = False
        if user and user["rol"] == "admin":
            editable = True
        elif p.proyecto and p.proyecto.creado_por_id == user["usuario_id"]:
            editable = True

        resultados.append({
            "id": p.id,
            "nombre": p.nombre,
            "direccion": p.direccion,
            "superficie_ha": p.superficie_ha,
            "comuna_id": p.comuna_id,
            "fuente_financiamiento_id": p.fuente_financiamiento_id,
            "proyecto_id": p.proyecto_id,
            "geometria": convertir_wkb_a_geojson(p.geometria),
            "comuna": comuna_dict,
            "fuente_financiamiento": fuente_dict,
            "proyecto": proyecto_dict,
            "editable": editable
        })

    return resultados




@router.post("/", response_model=ParqueOut)
async def crear_parque(request: Request, db: Session = Depends(get_db)):
    try:
        user = request.state.user
        body = await request.json()

        payload = ParqueCreate(**body)
        geojson = json.loads(payload.geometria) if isinstance(payload.geometria, str) else payload.geometria

        if not geojson.get("type") or not geojson.get("coordinates"):
            raise HTTPException(status_code=400, detail="‚ùå Geometr√≠a inv√°lida.")

        geom_pg = from_shape(shape(geojson), srid=4326)

        nuevo = Parque(
            proyecto_id=payload.proyecto_id,
            comuna_id=payload.comuna_id,
            nombre=payload.nombre,
            direccion=payload.direccion,
            superficie_ha=payload.superficie_ha,
            fuente_financiamiento_id=payload.fuente_financiamiento_id,
            geometria=geom_pg
        )

        db.add(nuevo)
        db.commit()
        db.refresh(nuevo)

        # Asegurar que relaciones est√©n cargadas
        try:
            _ = nuevo.comuna.provincia_id
        except:
            db.refresh(nuevo, attribute_names=["comuna"])

        if nuevo.fuente_financiamiento_id and not nuevo.fuente_financiamiento:
            db.refresh(nuevo, attribute_names=["fuente_financiamiento"])
        if nuevo.proyecto_id and not nuevo.proyecto:
            db.refresh(nuevo, attribute_names=["proyecto"])

        geojson_geom = mapping(shape(geojson))

        editable = False
        if user and user["rol"] == "admin":
            editable = True
        else:
            proyecto = db.query(Proyecto).filter(Proyecto.id == nuevo.proyecto_id).first()
            if proyecto and proyecto.creado_por_id == user["usuario_id"]:
                editable = True

        return ParqueOut(
            id=nuevo.id,
            proyecto_id=nuevo.proyecto_id,
            comuna_id=nuevo.comuna_id,
            nombre=nuevo.nombre,
            direccion=nuevo.direccion,
            superficie_ha=nuevo.superficie_ha,
            fuente_financiamiento_id=nuevo.fuente_financiamiento_id,
            geometria=geojson_geom,
            comuna=nuevo.comuna,
            fuente_financiamiento=nuevo.fuente_financiamiento,
            proyecto=nuevo.proyecto,
            editable=editable
        )

    except HTTPException as e:
        raise e
    except Exception as e:
        db.rollback()
        raise HTTPException(status_code=500, detail=f"‚ùå Error interno: {str(e)}")


@router.put("/{parque_id}", response_model=dict)
def actualizar_parque(parque_id: int, payload: ParqueUpdate, db: Session = Depends(get_db), current_user: Usuario = Depends(get_current_user)):
    parque = db.query(Parque).filter(Parque.id == parque_id).first()
    if not parque:
        raise HTTPException(status_code=404, detail="‚ùå Parque no encontrado")

    proyecto = db.query(Proyecto).filter(Proyecto.id == parque.proyecto_id).first()
    if not proyecto:
        raise HTTPException(status_code=404, detail="‚ùå Proyecto no encontrado")

    if current_user.rol != "admin" and proyecto.creado_por_id != current_user.id:
        raise HTTPException(status_code=403, detail="‚ùå No autorizado para editar este parque")

    try:
        if payload.geometria:
            parque.geometria = validar_y_convertir_geojson(payload.geometria, tipo_esperado="Polygon")

        for attr, value in payload.dict(exclude_unset=True).items():
            if attr != "geometria":
                setattr(parque, attr, value)

        db.commit()
        return {"mensaje": "‚úÖ Parque actualizado correctamente"}

    except Exception as e:
        db.rollback()
        raise HTTPException(status_code=500, detail=f"‚ùå Error al actualizar parque: {str(e)}")


@router.delete("/{parque_id}", response_model=dict)
def eliminar_parque(parque_id: int, db: Session = Depends(get_db), current_user: Usuario = Depends(get_current_user)):
    parque = db.query(Parque).filter(Parque.id == parque_id).first()
    if not parque:
        raise HTTPException(status_code=404, detail="‚ùå Parque no encontrado")

    if current_user.rol != "admin":
        raise HTTPException(status_code=403, detail="‚ùå Solo administradores pueden eliminar parques")

    try:
        db.delete(parque)
        db.commit()
        return {"mensaje": "üóëÔ∏è Parque eliminado correctamente"}
    except Exception as e:
        db.rollback()
        raise HTTPException(status_code=500, detail=f"‚ùå Error al eliminar parque: {str(e)}")
</file>

<file path="backend/app/routes/proyecto.py">
from fastapi import APIRouter, Depends, HTTPException, Request, Query
from sqlalchemy.orm import Session, selectinload
from sqlalchemy.sql import text
from sqlalchemy import and_
from shapely.wkb import loads as wkb_loads
from shapely.geometry import mapping
from typing import List, Optional

from app.database import get_db
from app.models.proyecto import Proyecto
from app.models.pavimento import Pavimento
from app.models.ciclovia import Ciclovia
from app.models.parque import Parque
from app.schemas.proyecto import ProyectoCreate as ProyectoIn, ProyectoOut

router = APIRouter(prefix="/proyectos", tags=["Proyectos"])


# --------------------- üìç RUTAS P√öBLICAS --------------------- #

@router.get("/publicos")
def obtener_feature_collection(
    categorias: List[int] = Query(default=[]),
    comuna: Optional[int] = Query(default=None),
    db: Session = Depends(get_db)
):
    def construir_feature(objeto, nombre, sector, tipo):
        if not objeto.geometria:
            return None
        return {
            "type": "Feature",
            "geometry": mapping(wkb_loads(bytes(objeto.geometria.data))),
            "properties": {
                "id": objeto.id,
                "nombre": nombre,
                "sector": sector,
                "tipo": tipo,
                "proyecto_id": objeto.proyecto_id,
                "comuna_id": objeto.comuna_id
            }
        }

    features = []
    if not categorias:
        categorias = [1, 2, 3]

    if 1 in categorias:
        pav_query = db.query(Pavimento).join(Pavimento.proyecto).filter(
            Proyecto.estado_proyecto == 'aprobado',
            Proyecto.elim_pendiente == False
        )
        if comuna:
            pav_query = pav_query.filter(Pavimento.comuna_id == comuna)
        for p in pav_query:
            f = construir_feature(p, p.proyecto.nombre, p.sector, "Pavimento")
            if f:
                features.append(f)

    if 2 in categorias:
        cic_query = db.query(Ciclovia).join(Ciclovia.proyecto).filter(
            Proyecto.estado_proyecto == 'aprobado',
            Proyecto.elim_pendiente == False
        )
        if comuna:
            cic_query = cic_query.filter(Ciclovia.comuna_id == comuna)
        for c in cic_query:
            f = construir_feature(c, c.proyecto.nombre, c.nombre_tramo, "Ciclov√≠a")
            if f:
                features.append(f)

    if 3 in categorias:
        parque_query = db.query(Parque).options(selectinload(Parque.proyecto)).filter(
            Parque.proyecto.has(and_(
                Proyecto.estado_proyecto == 'aprobado',
                Proyecto.elim_pendiente == False
            ))
        )
        if comuna:
            parque_query = parque_query.filter(Parque.comuna_id == comuna)
        for pk in parque_query:
            if not pk.proyecto:
                continue
            f = construir_feature(pk, pk.proyecto.nombre, pk.direccion or "Sin direcci√≥n", "Parque")
            if f:
                features.append(f)

    return {
        "type": "FeatureCollection",
        "features": features
    }


@router.get("/publicos/totales")
def obtener_totales(db: Session = Depends(get_db)):
    query = text("""
        SELECT COUNT(*) FROM proyecto p
        WHERE p.estado_proyecto = 'aprobado'
          AND elim_pendiente = false
          AND (
              EXISTS (SELECT 1 FROM pavimento pa WHERE pa.proyecto_id = p.id)
              OR EXISTS (SELECT 1 FROM parque pr WHERE pr.proyecto_id = p.id)
              OR EXISTS (SELECT 1 FROM ciclovia c WHERE c.proyecto_id = p.id)
          )
    """)
    proyectos_activos = db.execute(query).scalar()

    total_pavimentos = db.query(Pavimento).join(Pavimento.proyecto).filter(
        Proyecto.estado_proyecto == 'aprobado',
        Proyecto.elim_pendiente == False,
        Pavimento.geometria.isnot(None)
    ).count()

    total_ciclovias = db.query(Ciclovia).join(Ciclovia.proyecto).filter(
        Proyecto.estado_proyecto == 'aprobado',
        Proyecto.elim_pendiente == False,
        Ciclovia.geometria.isnot(None)
    ).count()

    total_parques = db.query(Parque).join(Parque.proyecto).filter(
        Proyecto.estado_proyecto == 'aprobado',
        Proyecto.elim_pendiente == False,
        Parque.geometria.isnot(None)
    ).count()

    return {
        "proyectos_activos": proyectos_activos,
        "pavimentos": total_pavimentos,
        "ciclovias": total_ciclovias,
        "parques": total_parques
    }

# --------------------- üîê RUTAS PRIVADAS --------------------- #

@router.post("/", response_model=ProyectoOut)
def crear_proyecto(proyecto_in: ProyectoIn, request: Request, db: Session = Depends(get_db)):
    user = request.state.user
    if not user:
        raise HTTPException(status_code=401, detail="No autenticado")

    if user["rol"] == "editor":
        proyecto_in.estado_proyecto = "pendiente"

    proyecto = Proyecto(**proyecto_in.dict(), creado_por_id=user["usuario_id"])
    db.add(proyecto)
    db.commit()
    db.refresh(proyecto)
    return proyecto


@router.get("/")
def listar_proyectos_sin_geo(request: Request, db: Session = Depends(get_db)):
    user = request.state.user
    if not user:
        raise HTTPException(status_code=401, detail="No autenticado")

    proyectos = db.query(Proyecto).filter(
        Proyecto.estado_proyecto == "aprobado",
        Proyecto.elim_pendiente == False,
        ~Proyecto.pavimentos.any(Pavimento.geometria.isnot(None)),
        ~Proyecto.ciclovias.any(Ciclovia.geometria.isnot(None)),
        ~Proyecto.parques.any(Parque.geometria.isnot(None))
    ).options(selectinload(Proyecto.categoria)).all()

    return [{
        "id": p.id,
        "nombre": p.nombre,
        "descripcion": p.descripcion,
        "categoria": {
            "id": p.categoria.id,
            "nombre": p.categoria.nombre
        } if p.categoria else None,
        "estado_proyecto": p.estado_proyecto,
        "editable": user["rol"] == "admin" or p.creado_por_id == user["usuario_id"]
    } for p in proyectos]


@router.get("/padres")
def listar_proyectos_padres_reales(request: Request, db: Session = Depends(get_db)):
    user = request.state.user
    if not user:
        raise HTTPException(status_code=401, detail="No autenticado")

    proyectos_padres = db.query(Proyecto).options(selectinload(Proyecto.categoria)).filter(
        Proyecto.estado_proyecto == "aprobado",
        Proyecto.elim_pendiente == False,
        ~Proyecto.categoria_id.in_([1, 2, 3])
    ).all()

    return [{
        "id": p.id,
        "nombre": p.nombre,
        "descripcion": p.descripcion,
        "categoria": {
            "id": p.categoria.id,
            "nombre": p.categoria.nombre
        } if p.categoria else None,
        "estado_proyecto": p.estado_proyecto,
        "editable": user["rol"] == "admin" or p.creado_por_id == user["usuario_id"],
        "hijos": []
    } for p in proyectos_padres]


@router.get("/aprobados")
def listar_proyectos_aprobados(request: Request, db: Session = Depends(get_db)):
    user = request.state.user
    if not user:
        raise HTTPException(status_code=401, detail="No autenticado")

    proyectos = db.query(Proyecto).options(selectinload(Proyecto.categoria)).filter(
        Proyecto.estado_proyecto == "aprobado",
        Proyecto.elim_pendiente == False
    ).all()

    return [{
        "id": p.id,
        "nombre": p.nombre,
        "descripcion": p.descripcion,
        "categoria": {
            "id": p.categoria.id,
            "nombre": p.categoria.nombre
        } if p.categoria else None,
        "estado_proyecto": p.estado_proyecto,
        "editable": user["rol"] == "admin" or p.creado_por_id == user["usuario_id"]
    } for p in proyectos]


@router.get("/{id}", response_model=ProyectoOut)
def obtener_proyecto(id: int, db: Session = Depends(get_db)):
    proyecto = db.query(Proyecto).options(selectinload(Proyecto.categoria)).get(id)
    if not proyecto:
        raise HTTPException(status_code=404, detail="Proyecto no encontrado")
    return proyecto


@router.put("/{id}", response_model=ProyectoOut)
def actualizar_proyecto(id: int, datos: ProyectoIn, request: Request, db: Session = Depends(get_db)):
    user = request.state.user
    if not user:
        raise HTTPException(status_code=401, detail="No autenticado")

    proyecto = db.query(Proyecto).get(id)
    if not proyecto:
        raise HTTPException(status_code=404, detail="Proyecto no encontrado")

    if user["rol"] != "admin" and proyecto.creado_por_id != user["usuario_id"]:
        raise HTTPException(status_code=403, detail="No autorizado")

    for campo, valor in datos.dict().items():
        setattr(proyecto, campo, valor)

    db.commit()
    db.refresh(proyecto)
    return proyecto


@router.delete("/{id}")
def eliminar_proyecto(id: int, request: Request, db: Session = Depends(get_db)):
    user = request.state.user
    if not user:
        raise HTTPException(status_code=401, detail="No autenticado")

    proyecto = db.query(Proyecto).get(id)
    if not proyecto:
        raise HTTPException(status_code=404, detail="Proyecto no encontrado")

    if user["rol"] != "admin" and proyecto.creado_por_id != user["usuario_id"]:
        raise HTTPException(status_code=403, detail="No autorizado")

    proyecto.elim_pendiente = True
    db.commit()
    return {"detail": "Proyecto eliminado correctamente"}


@router.put("/{id}/aprobar")
def aprobar_proyecto(id: int, request: Request, db: Session = Depends(get_db)):
    user = request.state.user
    if not user or user["rol"] != "admin":
        raise HTTPException(status_code=403, detail="No autorizado")

    proyecto = db.query(Proyecto).filter_by(id=id).first()
    if not proyecto:
        raise HTTPException(status_code=404, detail="Proyecto no encontrado")

    proyecto.estado_proyecto = "aprobado"
    proyecto.aprobado_por_id = user["usuario_id"]
    db.commit()
    return {"mensaje": "‚úÖ Proyecto aprobado correctamente"}


@router.put("/{id}/rechazar")
def rechazar_proyecto(id: int, request: Request, db: Session = Depends(get_db)):
    user = request.state.user
    if not user or user["rol"] != "admin":
        raise HTTPException(status_code=403, detail="No autorizado")

    proyecto = db.query(Proyecto).filter_by(id=id).first()
    if not proyecto:
        raise HTTPException(status_code=404, detail="Proyecto no encontrado")

    proyecto.estado_proyecto = "rechazado"
    proyecto.aprobado_por_id = user["usuario_id"]
    db.commit()
    return {"mensaje": "‚ö†Ô∏è Proyecto rechazado correctamente"}


@router.get("/pendientes")
def listar_proyectos_pendientes(request: Request, db: Session = Depends(get_db)):
    user = request.state.user
    if not user or user["rol"] != "admin":
        raise HTTPException(status_code=403, detail="No autorizado")

    proyectos = db.query(Proyecto).options(selectinload(Proyecto.categoria)).filter(
        Proyecto.estado_proyecto == "pendiente",
        Proyecto.elim_pendiente == False
    ).all()

    return [{
        "id": p.id,
        "nombre": p.nombre,
        "descripcion": p.descripcion,
        "categoria": {
            "id": p.categoria.id,
            "nombre": p.categoria.nombre
        } if p.categoria else None,
        "estado_proyecto": p.estado_proyecto
    } for p in proyectos]
</file>

<file path="backend/app/schemas/parque.py">
from pydantic import BaseModel
from typing import Optional, Dict
from app.schemas.comuna import ComunaOut
from app.schemas.fuente_financiamiento import FuenteFinanciamientoOut
from app.schemas.proyecto import ProyectoOut


class ParqueCreate(BaseModel):
    nombre: str
    comuna_id: int
    direccion: Optional[str] = None
    superficie_ha: Optional[float] = None
    fuente_financiamiento_id: Optional[int] = None
    geometria: Dict
    proyecto_id: int

    model_config = {"from_attributes": True}


class ParqueUpdate(BaseModel):
    nombre: Optional[str] = None
    comuna_id: Optional[int] = None
    direccion: Optional[str] = None
    superficie_ha: Optional[float] = None
    fuente_financiamiento_id: Optional[int] = None
    geometria: Optional[Dict] = None

    model_config = {"from_attributes": True}


class ParqueOut(BaseModel):
    id: int
    proyecto_id: Optional[int] = None
    comuna_id: Optional[int] = None
    nombre: Optional[str] = None
    direccion: Optional[str] = None
    superficie_ha: Optional[float] = None
    fuente_financiamiento_id: Optional[int] = None
    geometria: Optional[Dict] = None
    comuna: Optional[ComunaOut] = None
    fuente_financiamiento: Optional[FuenteFinanciamientoOut] = None
    proyecto: Optional[ProyectoOut] = None
    editable: bool

    model_config = {"from_attributes": True}


class ParqueDetalleOut(ParqueOut):
    pass
</file>

<file path="frontend/package.json">
{
  "name": "frontend",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "ajv": "^8.17.1",
    "ajv-keywords": "^5.1.0",
    "axios": "^1.10.0",
    "firebase": "^11.9.1",
    "leaflet": "^1.9.4",
    "leaflet-draw": "^1.0.4",
    "proj4": "^2.19.7",
    "qs": "^6.14.0",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-hot-toast": "^2.5.2",
    "react-icons": "^5.0.1",
    "react-leaflet": "^4.2.1",
    "react-leaflet-draw": "^0.20.0",
    "react-router-dom": "^6.21.2",
    "react-scripts": "5.0.1",
    "react-select": "^5.10.2",
    "react-toastify": "^11.0.5",
    "web-vitals": "^2.1.4"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}
</file>

<file path="frontend/src/components/FormularioPavimento.js">
import { useEffect, useState } from "react";
import Select from "react-select";
import api from "../services/api";
import VistaPreviaGeojson from "./VistaPreviaGeojson";
import proj4 from "proj4";

proj4.defs("EPSG:32718", "+proj=utm +zone=18 +south +datum=WGS84 +units=m +no_defs");

const convertirArcGISToGeoJSON = (arcgisJson) => {
  const coordsUTM = arcgisJson.paths?.[0];
  if (!coordsUTM) return null;

  const coordsLatLon = coordsUTM.map(([x, y]) =>
    proj4("EPSG:32718", "EPSG:4326", [x, y])
  );

  return {
    type: "LineString",
    coordinates: coordsLatLon.map(([lon, lat]) => [
      parseFloat(lon.toFixed(6)),
      parseFloat(lat.toFixed(6))
    ])
  };
};

const FormularioPavimento = ({ proyectoId, modoEdicion = false, pavimentoId = null, onSuccess }) => {
  const [formData, setFormData] = useState({
    comuna: null,
    sector: "",
    longitud_metros: "",
    tipo_calzada: null,
    tipos_pavimento: [],
    estado_avance: null,
    geometria: JSON.stringify({
      type: "LineString",
      coordinates: [
        [-73.0508, -36.828],
        [-73.0495, -36.8285],
        [-73.0483, -36.8288]
      ]
    }, null, 2),
    proyecto_id: null
  });

  const [geoValido, setGeoValido] = useState(true);
  const [tiposCalzada, setTiposCalzada] = useState([]);
  const [tiposPavimento, setTiposPavimento] = useState([]);
  const [estadosAvance, setEstadosAvance] = useState([]);
  const [comunas, setComunas] = useState([]);
  const [mensaje, setMensaje] = useState("");

  useEffect(() => {
    api.get("/tipo-calzada").then(res => setTiposCalzada(res.data));
    api.get("/tipo-pavimento").then(res => setTiposPavimento(res.data));
    api.get("/estado-avance").then(res => setEstadosAvance(res.data));
    api.get("/comunas").then(res => setComunas(res.data));
  }, []);

  useEffect(() => {
    if (!modoEdicion || !pavimentoId) return;

    const datosListos = tiposCalzada.length && tiposPavimento.length && estadosAvance.length && comunas.length;
    if (!datosListos) return;

    const cargarPavimento = async () => {
      try {
        const res = await api.get(`/pavimentos/${pavimentoId}`);
        const pav = res.data;

        setFormData({
          comuna: pav.comuna ? { value: pav.comuna.id, label: pav.comuna.nombre } : null,
          sector: pav.sector || "",
          longitud_metros: pav.longitud_metros?.toString() || "",
          tipo_calzada: pav.tipo_calzada_id
            ? {
                value: pav.tipo_calzada_id,
                label: tiposCalzada.find((tc) => tc.id === pav.tipo_calzada_id)?.nombre || ""
              }
            : null,
          tipos_pavimento: pav.tipos_pavimento?.map((tp) => ({
            value: tp.id,
            label: tp.nombre
          })) || [],
          estado_avance: pav.estado_avance
            ? { value: pav.estado_avance.id, label: pav.estado_avance.nombre }
            : null,
          geometria: JSON.stringify(pav.geometria, null, 2),
          proyecto_id: pav.proyecto_id || null
        });

        setGeoValido(true);
      } catch (err) {
        console.error("Error al cargar pavimento:", err);
        setMensaje("‚ùå Error al cargar los datos del pavimento.");
      }
    };

    cargarPavimento();
  }, [modoEdicion, pavimentoId, tiposCalzada, tiposPavimento, estadosAvance, comunas]);

  const handleChange = (e) => {
    const { name, value } = e.target;
    if (name === "geometria") {
      try {
        const parsed = JSON.parse(value);

        if (parsed.paths && parsed.spatialReference?.wkid === 32718) {
          const geojson = convertirArcGISToGeoJSON(parsed);
          setGeoValido(true);
          setFormData(prev => ({ ...prev, geometria: JSON.stringify(geojson, null, 2) }));
        } else if (parsed.type === "LineString" && parsed.coordinates) {
          setGeoValido(true);
          setFormData(prev => ({ ...prev, geometria: value }));
        } else {
          setGeoValido(false);
          setFormData(prev => ({ ...prev, geometria: value }));
        }
      } catch {
        setGeoValido(false);
        setFormData(prev => ({ ...prev, geometria: value }));
      }
    } else {
      setFormData(prev => ({ ...prev, [name]: value }));
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!geoValido) {
      setMensaje("‚ùå Geometr√≠a inv√°lida: debe ser un GeoJSON v√°lido de tipo LineString.");
      return;
    }

    let geoObjeto;
    try {
      geoObjeto = JSON.parse(formData.geometria);
    } catch {
      setMensaje("‚ùå Error al interpretar el GeoJSON.");
      return;
    }

    const proyectoFinal = proyectoId || formData.proyecto_id;
    if (!proyectoFinal) {
      setMensaje("‚ùå No se pudo determinar el proyecto asociado.");
      return;
    }

    const payload = {
      comuna_id: formData.comuna?.value,
      sector: formData.sector,
      longitud_metros: parseFloat(formData.longitud_metros),
      tipo_calzada_id: formData.tipo_calzada?.value,
      tipos_pavimento: formData.tipos_pavimento.map(p => p.value),
      estado_avance_id: formData.estado_avance?.value,
      geometria: geoObjeto,
      proyecto_id: proyectoFinal
    };

    try {
      if (modoEdicion && pavimentoId) {
        const res = await api.put(`/pavimentos/${pavimentoId}`, payload);
        const mensajeBackend = res.data?.mensaje || "‚úèÔ∏è Pavimento actualizado.";
        setMensaje(mensajeBackend);
        if (mensajeBackend.includes("‚úÖ") && onSuccess) setTimeout(() => onSuccess(), 5000);
      } else {
        const res = await api.post("/pavimentos", payload);
        const mensajeBackend = res.data?.mensaje || "‚úÖ Pavimento creado con √©xito.";
        setMensaje(mensajeBackend);
        if (onSuccess) setTimeout(() => onSuccess(), 5000);
      }
    } catch (err) {
      console.error(err);
      setMensaje("‚ùå Error al guardar pavimento.");
    }
  };

  return (
    <div className="formulario-container">
      <h3>{modoEdicion ? "Editar Pavimento" : "Agregar Pavimento"}</h3>

      <form onSubmit={handleSubmit}>
        <label>Comuna:</label>
        <Select
          options={comunas.map((c) => ({ value: c.id, label: c.nombre }))}
          value={formData.comuna}
          onChange={(selected) => setFormData((prev) => ({ ...prev, comuna: selected }))}
          placeholder="Seleccionar comuna"
          isClearable
        />

        <label>Sector:</label>
        <input type="text" name="sector" value={formData.sector} onChange={handleChange} required />

        <label>Longitud (m):</label>
        <input type="number" name="longitud_metros" value={formData.longitud_metros} onChange={handleChange} required />

        <label>Tipo de Calzada:</label>
        <Select
          options={tiposCalzada.map((tc) => ({ value: tc.id, label: tc.nombre }))}
          value={formData.tipo_calzada}
          onChange={(selected) => setFormData((prev) => ({ ...prev, tipo_calzada: selected }))}
          placeholder="Seleccionar tipo"
          isClearable
        />

        <label>Tipos de Pavimento:</label>
        <Select
          options={tiposPavimento.map((tp) => ({ value: tp.id, label: tp.nombre }))}
          value={formData.tipos_pavimento}
          onChange={(selected) => setFormData((prev) => ({ ...prev, tipos_pavimento: selected }))}
          placeholder="Seleccionar tipos"
          isMulti
        />

        <label>Estado de Avance:</label>
        <Select
          options={estadosAvance.map((ea) => ({ value: ea.id, label: ea.nombre }))}
          value={formData.estado_avance}
          onChange={(selected) => setFormData((prev) => ({ ...prev, estado_avance: selected }))}
          placeholder="Seleccionar estado"
          isClearable
        />

        <label htmlFor="geometria">Geometr√≠a (GeoJSON o ArcGIS JSON):</label>
        <textarea
          id="geometria"
          name="geometria"
          rows={6}
          value={formData.geometria}
          onChange={handleChange}
          style={{
            border: `2px solid ${geoValido ? "green" : "red"}`,
            width: "100%",
            fontFamily: "monospace",
            padding: "8px"
          }}
        />
        <small style={{ color: geoValido ? "#666" : "red" }}>
          {geoValido
            ? "‚úÖ Geometr√≠a v√°lida (GeoJSON o ArcGIS JSON transformado)"
            : "‚ùå Formato no reconocido o inv√°lido."}
        </small>

        <VistaPreviaGeojson geojsonString={formData.geometria} tipoEsperado="LineString" />

        <button type="submit" className="btn btn-primary btn-default-size">
          {modoEdicion ? "Actualizar" : "Guardar"} Pavimento
        </button>
      </form>

      {mensaje && (
        <p style={{
          marginTop: "16px",
          padding: "8px",
          border: "1px solid",
          borderColor: mensaje.startsWith("‚úÖ") ? "green" : "red",
          backgroundColor: mensaje.startsWith("‚úÖ") ? "#e6ffea" : "#ffe6e6",
          color: mensaje.startsWith("‚úÖ") ? "#006600" : "#990000"
        }}>
          {mensaje}
        </p>
      )}
    </div>
  );
};

export default FormularioPavimento;
</file>

<file path="frontend/src/components/FormularioProyecto.js">
import { useState, useEffect } from 'react';
import { useParams } from 'react-router-dom';
import Select from 'react-select';
import api from '../services/api';
import FormularioPavimento from './FormularioPavimento';
import FormularioCiclovia from './FormularioCiclovia';
import FormularioParque from './FormularioParque';
import '../css/formularios.css';

const FormularioProyecto = ({ modoEdicion = false, proyectoId = null, onSuccess = null }) => {
  const { id: idUrl } = useParams();
  const [proyectos, setProyectos] = useState([]);
  const [categorias, setCategorias] = useState([]);
  const [usuario, setUsuario] = useState(null);
  const [proyectoExistente, setProyectoExistente] = useState('');
  const [formData, setFormData] = useState({
    nombre: '',
    descripcion: '',
    categoria_id: '',
    estado_proyecto: 'pendiente'
  });
  const [mensaje, setMensaje] = useState('');

  const idFinal = proyectoId || idUrl;

  useEffect(() => {
    api.get('/categorias').then(res => setCategorias(res.data));
    api.get('/proyectos/aprobados').then(res => setProyectos(res.data));
    api.get('/me').then(res => setUsuario(res.data));
  }, []);

  useEffect(() => {
    if (modoEdicion && idFinal && usuario && categorias.length > 0) {
      api.get(`/proyectos/${idFinal}`).then(res => {
        const data = res.data;
        setFormData({
          nombre: data.nombre,
          descripcion: data.descripcion,
          categoria_id: data.categoria?.id || data.categoria_id,
          estado_proyecto: data.estado_proyecto || 'pendiente'
        });
        setProyectoExistente(String(data.id));
      });
    }
  }, [modoEdicion, idFinal, usuario, categorias]);

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  const handleSelectChange = (name, selectedOption) => {
    setFormData(prev => ({
      ...prev,
      [name]: selectedOption ? selectedOption.value : ''
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    const payload = {
      ...formData,
      categoria_id: parseInt(formData.categoria_id),
      estado_proyecto: usuario?.rol === 'admin' ? formData.estado_proyecto : 'pendiente'
    };

    try {
      if (modoEdicion && idFinal) {
        const res = await api.put(`/proyectos/${idFinal}`, payload);
        setMensaje(res.data?.mensaje || "‚úèÔ∏è Proyecto actualizado correctamente");
        if (res.data?.mensaje?.startsWith("‚úÖ") && onSuccess) {
          setTimeout(onSuccess, 3000);
        }
      } else {
        const res = await api.post('/proyectos', payload);
        setMensaje(res.data?.mensaje || "‚úÖ Proyecto creado exitosamente");
        setFormData({ nombre: '', descripcion: '', categoria_id: '', estado_proyecto: 'pendiente' });
        setProyectoExistente('');
        if (onSuccess) {
          setTimeout(onSuccess, 3000);
        }
      }

      const resProyectos = await api.get('/proyectos/aprobados');
      setProyectos(resProyectos.data);
    } catch {
      setMensaje("‚ùå Error al guardar el proyecto");
    }
  };

  const proyectoSeleccionado = proyectos.find(p => p.id === parseInt(proyectoExistente));
  const categoriaIdSeleccionada = proyectoSeleccionado?.categoria?.id || proyectoSeleccionado?.categoria_id;

  if (!usuario || categorias.length === 0) {
    return (
      <div className="loading-container">
        <div className="spinner"></div>
        <p className="loading-text">Cargando datos del proyecto...</p>
      </div>
    );
  }

  return (
    <div className="formulario-container">
      {/* SECCI√ìN 1: Selecci√≥n de proyecto existente */}
      {!modoEdicion && (
        <div>
          <h3>Seleccionar o Crear Proyecto</h3>
          <label className="font-level-7">Proyecto:</label>
          <Select
            options={[
              { label: 'Crear nuevo proyecto', value: '' },
              {
                label: 'Proyectos existentes',
                options: proyectos.map(p => ({
                  label: p.nombre,
                  value: String(p.id)
                }))
              }
            ]}
            value={proyectoExistente
              ? { label: proyectoSeleccionado?.nombre || '', value: proyectoExistente }
              : { label: 'Crear nuevo proyecto', value: '' }}
            onChange={(option) => setProyectoExistente(option.value)}
          />
        </div>
      )}

      {/* SECCI√ìN 2: Formulario principal */}
      {(!proyectoExistente || modoEdicion) && (
        <form onSubmit={handleSubmit} className="bg-white p-4 rounded-xl border border-gray-b mb-6">
          <label className="font-level-7">Nombre:</label>
          <input className="input-text" type="text" name="nombre" value={formData.nombre} onChange={handleInputChange} required />

          <label className="font-level-7">Descripci√≥n:</label>
          <textarea className="input-text" name="descripcion" value={formData.descripcion} onChange={handleInputChange} required />

          <label className="font-level-7">Categor√≠a:</label>
          <Select
            options={categorias.map(c => ({ value: c.id, label: c.nombre }))}
            value={categorias.find(c => c.id === parseInt(formData.categoria_id)) ?
              { value: formData.categoria_id, label: categorias.find(c => c.id === parseInt(formData.categoria_id)).nombre }
              : null}
            onChange={opt => handleSelectChange('categoria_id', opt)}
            placeholder="Seleccionar categor√≠a"
          />

          {usuario?.rol === 'admin' && (
            <>
              <label className="font-level-7">Estado del Proyecto:</label>
              <Select
                options={[
                  { value: 'pendiente', label: 'Pendiente' },
                  { value: 'aprobado', label: 'Aprobado' },
                  { value: 'rechazado', label: 'Rechazado' }
                ]}
                value={{
                  value: formData.estado_proyecto,
                  label: formData.estado_proyecto.charAt(0).toUpperCase() + formData.estado_proyecto.slice(1)
                }}
                onChange={opt => handleSelectChange('estado_proyecto', opt)}
              />
            </>
          )}

          <button type="submit" className="btn btn-primary btn-default-size mt-4">
            {modoEdicion ? 'Actualizar Proyecto' : 'Guardar Proyecto'}
          </button>
        </form>
      )}

      {/* SECCI√ìN 3: Formulario hijo */}
      {proyectoExistente && !modoEdicion && (
        <div><br />
          <div className="text-gray-b mb-3">
            <p><strong>Nombre:</strong> {proyectoSeleccionado?.nombre}</p>
            <p><strong>Categor√≠a:</strong> {categorias.find(c => c.id === categoriaIdSeleccionada)?.nombre}</p>
            <p><strong>Estado:</strong> {proyectoSeleccionado?.estado_proyecto}</p>
          </div>

          {(() => {
            const formularios = {
              1: FormularioPavimento,
              2: FormularioCiclovia,
              3: FormularioParque,
            };

            const FormularioEspecifico = formularios[categoriaIdSeleccionada];

            return FormularioEspecifico ? (
              <FormularioParque proyectoIdSeleccionado={proyectoSeleccionado.id} />

            ) : (
              <p className="text-orange">‚ö†Ô∏è Esta categor√≠a a√∫n no tiene un formulario implementado.</p>
            );
          })()}
        </div>
      )}

      {/* MENSAJE */}
      {mensaje && (
        <p className={`mt-4 p-3 rounded text-sm ${
          mensaje.startsWith("‚úÖ")
            ? "bg-green text-white"
            : mensaje.startsWith("‚ùå")
              ? "bg-secondary text-white"
              : "bg-orange-light text-white"
        }`}>
          {mensaje}
        </p>
      )}
    </div>
  );
};

export default FormularioProyecto;
</file>

<file path="backend/app/routes/pavimento.py">
import json
from typing import List

from fastapi import APIRouter, Depends, HTTPException, Request
from sqlalchemy.orm import Session, selectinload
from sqlalchemy import text
from shapely.geometry import shape, mapping
from shapely.wkb import loads as wkb_loads
from geoalchemy2.shape import from_shape

from app.database import get_db
from app.models.pavimento import Pavimento
from app.models.proyecto import Proyecto
from app.models.log_cambios import LogCambios
from app.schemas.pavimento import PavimentoCreate, PavimentoUpdate, PavimentoOut

router = APIRouter(prefix="/pavimentos", tags=["Pavimentos"])

@router.post("/", response_model=PavimentoOut)
async def crear_pavimento(request: Request, db: Session = Depends(get_db)):
    try:
        user = request.state.user
        body = await request.json()
        payload = PavimentoCreate(**body)
        geojson = json.loads(payload.geometria) if isinstance(payload.geometria, str) else payload.geometria

        if not geojson.get("type") or not geojson.get("coordinates"):
            raise HTTPException(status_code=400, detail="‚ùå Geometr√≠a inv√°lida.")

        geom_pg = from_shape(shape(geojson), srid=4326)

        nuevo = Pavimento(
            proyecto_id=payload.proyecto_id,
            comuna_id=payload.comuna_id,
            sector=payload.sector,
            longitud_metros=payload.longitud_metros,
            tipo_calzada_id=payload.tipo_calzada_id,
            estado_avance_id=payload.estado_avance_id,
            geometria=geom_pg
        )

        db.add(nuevo)
        db.commit()
        db.refresh(nuevo)

        try:
            _ = nuevo.comuna.id
            _ = nuevo.estado_avance.id
        except:
            db.refresh(nuevo, attribute_names=["comuna", "estado_avance"])

        for tipo_id in payload.tipos_pavimento:
            db.execute(
                text("INSERT INTO pavimento_tipo_pavimento (pavimento_id, tipo_pavimento_id) VALUES (:pid, :tid)"),
                {"pid": nuevo.id, "tid": tipo_id}
            )

        tipos = db.execute(
            text("SELECT id, nombre FROM tipo_pavimento WHERE id IN (SELECT tipo_pavimento_id FROM pavimento_tipo_pavimento WHERE pavimento_id = :pid)"),
            {"pid": nuevo.id}
        ).fetchall()

        geojson_geom = mapping(shape(geojson))

        editable = False
        if user and user["rol"] == "admin":
            editable = True
        else:
            proyecto = db.query(Proyecto).filter(Proyecto.id == nuevo.proyecto_id).first()
            if proyecto and proyecto.creado_por_id == user["usuario_id"]:
                editable = True

        return PavimentoOut(
            id=nuevo.id,
            proyecto_id=nuevo.proyecto_id,
            sector=nuevo.sector,
            longitud_metros=nuevo.longitud_metros,
            tipo_calzada_id=nuevo.tipo_calzada_id,
            geometria=geojson_geom,
            comuna={"id": nuevo.comuna.id, "nombre": nuevo.comuna.nombre},
            estado_avance={"id": nuevo.estado_avance.id, "nombre": nuevo.estado_avance.nombre},
            tipos_pavimento=[{"id": t.id, "nombre": t.nombre} for t in tipos],
            editable=editable
        )

    except HTTPException as e:
        raise e
    except Exception as e:
        db.rollback()
        raise HTTPException(status_code=500, detail=f"‚ùå Error interno: {str(e)}")


@router.get("/", response_model=List[PavimentoOut])
def listar_pavimentos(request: Request, db: Session = Depends(get_db)):
    user = request.state.user
    if not user:
        raise HTTPException(status_code=401, detail="‚ùå No autenticado")

    pavimentos = db.query(Pavimento).options(
        selectinload(Pavimento.comuna),
        selectinload(Pavimento.estado_avance),
        selectinload(Pavimento.proyecto)
    ).all()

    resultados = []
    for p in pavimentos:
        try:
            tipos = db.execute(
                text("SELECT id, nombre FROM tipo_pavimento WHERE id IN (SELECT tipo_pavimento_id FROM pavimento_tipo_pavimento WHERE pavimento_id = :pid)"),
                {"pid": p.id}
            ).fetchall()

            geojson_geom = mapping(wkb_loads(bytes(p.geometria.data)))

            editable = False
            if p.proyecto and (
                user["rol"] == "admin" or p.proyecto.creado_por_id == user["usuario_id"]
            ):
                editable = True

            resultados.append({
                "id": p.id,
                "proyecto_id": p.proyecto_id,
                "sector": p.sector,
                "longitud_metros": p.longitud_metros,
                "tipo_calzada_id": p.tipo_calzada_id,
                "geometria": geojson_geom,
                "comuna": {"id": p.comuna.id, "nombre": p.comuna.nombre},
                "estado_avance": {"id": p.estado_avance.id, "nombre": p.estado_avance.nombre},
                "tipos_pavimento": [{"id": t.id, "nombre": t.nombre} for t in tipos],
                "editable": editable
            })

        except Exception:
            continue

    return resultados


@router.get("/{pavimento_id}", response_model=PavimentoOut)
def obtener_pavimento(pavimento_id: int, db: Session = Depends(get_db)):
    pavimento = db.query(Pavimento).options(
        selectinload(Pavimento.comuna),
        selectinload(Pavimento.estado_avance)
    ).filter(Pavimento.id == pavimento_id).first()

    if not pavimento:
        raise HTTPException(status_code=404, detail="‚ùå Pavimento no encontrado.")

    tipos = db.execute(
        text("SELECT id, nombre FROM tipo_pavimento WHERE id IN (SELECT tipo_pavimento_id FROM pavimento_tipo_pavimento WHERE pavimento_id = :pid)"),
        {"pid": pavimento.id}
    ).fetchall()

    geojson_geom = mapping(wkb_loads(bytes(pavimento.geometria.data)))
    return PavimentoOut(
        id=pavimento.id,
        proyecto_id=pavimento.proyecto_id,
        sector=pavimento.sector,
        longitud_metros=pavimento.longitud_metros,
        tipo_calzada_id=pavimento.tipo_calzada_id,
        geometria=geojson_geom,
        comuna={"id": pavimento.comuna.id, "nombre": pavimento.comuna.nombre},
        estado_avance={"id": pavimento.estado_avance.id, "nombre": pavimento.estado_avance.nombre},
        tipos_pavimento=[{"id": t.id, "nombre": t.nombre} for t in tipos]
    )


@router.put("/{pavimento_id}", response_model=dict)
def actualizar_pavimento(
    pavimento_id: int,
    payload: PavimentoUpdate,
    request: Request,
    db: Session = Depends(get_db)
):
    user = request.state.user
    if not user:
        raise HTTPException(status_code=401, detail="‚ùå No autenticado")

    pavimento = db.query(Pavimento).filter(Pavimento.id == pavimento_id).first()
    if not pavimento:
        raise HTTPException(status_code=404, detail="‚ùå Pavimento no encontrado.")

    proyecto = db.query(Proyecto).filter(Proyecto.id == pavimento.proyecto_id).first()
    if not proyecto:
        raise HTTPException(status_code=404, detail="‚ùå Proyecto asociado no encontrado")

    if user["rol"] != "admin" and proyecto.creado_por_id != user["usuario_id"]:
        raise HTTPException(status_code=403, detail="‚ùå No tienes permisos para editar este pavimento.")

    try:
        cambios = []

        if payload.geometria:
            nueva_geom = json.loads(payload.geometria) if isinstance(payload.geometria, str) else payload.geometria
            if not nueva_geom.get("type") or not nueva_geom.get("coordinates"):
                raise HTTPException(status_code=400, detail="‚ùå Geometr√≠a inv√°lida.")
            nueva_geom_shape = from_shape(shape(nueva_geom), srid=4326)
            if pavimento.geometria != nueva_geom_shape:
                cambios.append(LogCambios(
                    proyecto_id=pavimento.proyecto_id,
                    usuario_id=user["usuario_id"],
                    accion="edici√≥n",
                    campo_modificado="geometr√≠a",
                    valor_anterior=str(pavimento.geometria),
                    valor_nuevo=json.dumps(nueva_geom)
                ))
                pavimento.geometria = nueva_geom_shape

        for attr, value in payload.dict(exclude_unset=True).items():
            if attr in ["geometria", "tipos_pavimento"]:
                continue
            valor_anterior = getattr(pavimento, attr)
            if value != valor_anterior:
                cambios.append(LogCambios(
                    proyecto_id=pavimento.proyecto_id,
                    usuario_id=user["usuario_id"],
                    accion="edici√≥n",
                    campo_modificado=attr,
                    valor_anterior=str(valor_anterior),
                    valor_nuevo=str(value)
                ))
                setattr(pavimento, attr, value)

        db.execute(
            text("DELETE FROM pavimento_tipo_pavimento WHERE pavimento_id = :pid"),
            {"pid": pavimento_id}
        )

        for tipo_id in payload.tipos_pavimento or []:
            db.execute(
                text("INSERT INTO pavimento_tipo_pavimento (pavimento_id, tipo_pavimento_id) VALUES (:pid, :tid)"),
                {"pid": pavimento_id, "tid": tipo_id}
            )

        if not cambios:
            return {"mensaje": "‚ö†Ô∏è No se detectaron cambios para actualizar."}

        for cambio in cambios:
            db.add(cambio)

        db.commit()
        db.refresh(pavimento)
        return {"mensaje": "‚úÖ Pavimento actualizado correctamente"}

    except Exception as e:
        db.rollback()
        raise HTTPException(status_code=500, detail=f"‚ùå Error interno: {str(e)}")


@router.delete("/{pavimento_id}", response_model=dict)
def eliminar_pavimento(pavimento_id: int, request: Request, db: Session = Depends(get_db)):
    user = request.state.user
    if not user:
        raise HTTPException(status_code=401, detail="‚ùå No autenticado")

    if user["rol"] != "admin":
        raise HTTPException(status_code=403, detail="‚ùå Solo los administradores pueden eliminar pavimentos.")

    pavimento = db.query(Pavimento).filter(Pavimento.id == pavimento_id).first()
    if not pavimento:
        raise HTTPException(status_code=404, detail="‚ùå Pavimento no encontrado.")

    try:
        db.execute(
            text("DELETE FROM pavimento_tipo_pavimento WHERE pavimento_id = :pid"),
            {"pid": pavimento_id}
        )

        db.delete(pavimento)
        db.commit()

        return {"mensaje": "üóëÔ∏è Pavimento eliminado correctamente"}
    except Exception as e:
        db.rollback()
        raise HTTPException(status_code=500, detail=f"‚ùå Error al eliminar pavimento: {str(e)}")
</file>

<file path="backend/app/main.py">
from fastapi import FastAPI, Depends
from fastapi.middleware.cors import CORSMiddleware
from fastapi.openapi.utils import get_openapi
from sqlalchemy.orm import Session

# Middleware personalizado
from app.middleware.auth_middleware import AuthMiddleware

# Base de datos
from app.database import get_db

# Rutas
from app.routes import (
    usuario, proyecto, pavimento, ciclovia, parque,
    auth, categoria, provincia, comuna, log_cambios, fuente_financiamiento
)

# Modelos referenciales
from app.models.tipo_calzada import TipoCalzada
from app.models.tipo_pavimento import TipoPavimento
from app.models.estado_avance import EstadoAvance
from app.models.contratista import Contratista

# Schemas referenciales
from app.schemas.tipo_calzada import TipoCalzadaOut
from app.schemas.tipo_pavimento import TipoPavimentoOut
from app.schemas.estado_avance import EstadoAvanceOut
from app.schemas.contratista import ContratistaOut


# üèóÔ∏è App principal
app = FastAPI(
    title="VisorGeo Minvu Biob√≠o",
    description="API para el visor territorial VisorGeo. Proyectos p√∫blicos.",
    version="1.0.0",
)

# üåê Middleware CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=[
        "http://localhost:3000",
        "http://127.0.0.1:3000",
        "https://visor-geo-minvu-biobio-sigma.vercel.app"
    ],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# üîê Middleware de autenticaci√≥n
app.add_middleware(AuthMiddleware)

# üîÅ Routers
app.include_router(usuario.router, prefix="/api", tags=["Usuarios"])
app.include_router(proyecto.router, prefix="/api", tags=["Proyectos"])
app.include_router(pavimento.router, prefix="/api", tags=["Pavimentos"])
app.include_router(ciclovia.router, prefix="/api", tags=["Ciclov√≠as"])
app.include_router(parque.router, prefix="/api", tags=["Parques Urbanos"])
app.include_router(categoria.router, prefix="/api", tags=["Categor√≠as"])
app.include_router(provincia.router, prefix="/api", tags=["Provincias"])
app.include_router(comuna.router, prefix="/api", tags=["Comunas"])
app.include_router(auth.router, prefix="/api", tags=["Auth"])
app.include_router(log_cambios.router, prefix="/api", tags=["Log de Cambios"])
app.include_router(fuente_financiamiento.router, prefix="/api", tags=["Fuente Financiamiento"])


# üìò Endpoints simples de consulta directa (tipo calzada, pavimento, etc.)
@app.get("/api/tipo-calzada", response_model=list[TipoCalzadaOut])
def get_tipo_calzada(db: Session = Depends(get_db)):
    return db.query(TipoCalzada).all()

@app.get("/api/tipo-pavimento", response_model=list[TipoPavimentoOut])
def get_tipo_pavimento(db: Session = Depends(get_db)):
    return db.query(TipoPavimento).all()

@app.get("/api/estado-avance", response_model=list[EstadoAvanceOut])
def get_estado_avance(db: Session = Depends(get_db)):
    return db.query(EstadoAvance).all()

@app.get("/api/contratistas", response_model=list[ContratistaOut])
def get_contratistas(db: Session = Depends(get_db)):
    return db.query(Contratista).all()


# üü¢ Ruta ra√≠z
@app.get("/", tags=["Estado"])
def root_status():
    return {
        "VisorGeo": "Minvu Biob√≠o",
        "estado": "‚úÖ API en l√≠nea",
        "documentaci√≥n": "https://visorgeominvubiobio.onrender.com/docs"
    }


# üìò Documentaci√≥n OpenAPI con soporte JWT
def custom_openapi():
    if app.openapi_schema:
        return app.openapi_schema
    openapi_schema = get_openapi(
        title=app.title,
        version=app.version,
        description=app.description,
        routes=app.routes,
    )
    openapi_schema["components"]["securitySchemes"] = {
        "BearerAuth": {
            "type": "http",
            "scheme": "bearer",
            "bearerFormat": "JWT"
        }
    }
    for path in openapi_schema["paths"].values():
        for operation in path.values():
            operation.setdefault("security", []).append({"BearerAuth": []})
    app.openapi_schema = openapi_schema
    return app.openapi_schema

app.openapi = custom_openapi
</file>

</files>
